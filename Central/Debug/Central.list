
Central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004dec  08004dec  00014dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f64  08004f64  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f6c  08004f6c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000002f8  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000354  20000354  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b114  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e1f  00000000  00000000  0002b1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000950  00000000  00000000  0002d008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000716  00000000  00000000  0002d958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020dd4  00000000  00000000  0002e06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bdf4  00000000  00000000  0004ee42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c537a  00000000  00000000  0005ac36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a80  00000000  00000000  0011ffb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00122a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004dd4 	.word	0x08004dd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004dd4 	.word	0x08004dd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff fe23 	bl	80001d0 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	e007      	b.n	80005a4 <bufclr+0x28>
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	dbf3      	blt.n	8000594 <bufclr+0x18>
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005c2:	f000 f933 	bl	800082c <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80005c6:	4823      	ldr	r0, [pc, #140]	; (8000654 <ESP_Init+0x9c>)
 80005c8:	f000 f9fc 	bl	80009c4 <Uart_sendstring>
	HAL_Delay(1000);
 80005cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d0:	f001 f86a 	bl	80016a8 <HAL_Delay>

	Uart_flush();
 80005d4:	f000 f972 	bl	80008bc <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 80005d8:	481f      	ldr	r0, [pc, #124]	; (8000658 <ESP_Init+0xa0>)
 80005da:	f000 f9f3 	bl	80009c4 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 80005de:	bf00      	nop
 80005e0:	481e      	ldr	r0, [pc, #120]	; (800065c <ESP_Init+0xa4>)
 80005e2:	f000 fa1f 	bl	8000a24 <Wait_for>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f9      	beq.n	80005e0 <ESP_Init+0x28>

	Uart_flush();
 80005ec:	f000 f966 	bl	80008bc <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 80005f0:	481b      	ldr	r0, [pc, #108]	; (8000660 <ESP_Init+0xa8>)
 80005f2:	f000 f9e7 	bl	80009c4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80005f6:	bf00      	nop
 80005f8:	4818      	ldr	r0, [pc, #96]	; (800065c <ESP_Init+0xa4>)
 80005fa:	f000 fa13 	bl	8000a24 <Wait_for>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0f9      	beq.n	80005f8 <ESP_Init+0x40>

	Uart_flush();
 8000604:	f000 f95a 	bl	80008bc <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000608:	f107 0008 	add.w	r0, r7, #8
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4914      	ldr	r1, [pc, #80]	; (8000664 <ESP_Init+0xac>)
 8000612:	f003 ff2b 	bl	800446c <siprintf>
	Uart_sendstring(data);
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f9d2 	bl	80009c4 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 8000620:	bf00      	nop
 8000622:	4811      	ldr	r0, [pc, #68]	; (8000668 <ESP_Init+0xb0>)
 8000624:	f000 f9fe 	bl	8000a24 <Wait_for>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <ESP_Init+0x6a>

	Uart_flush();
 800062e:	f000 f945 	bl	80008bc <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <ESP_Init+0xb4>)
 8000634:	f000 f9c6 	bl	80009c4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000638:	bf00      	nop
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <ESP_Init+0xa4>)
 800063c:	f000 f9f2 	bl	8000a24 <Wait_for>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <ESP_Init+0x82>

	Uart_flush();
 8000646:	f000 f939 	bl	80008bc <Uart_flush>

}
 800064a:	bf00      	nop
 800064c:	3758      	adds	r7, #88	; 0x58
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	08004dec 	.word	0x08004dec
 8000658:	08004df8 	.word	0x08004df8
 800065c:	08004e00 	.word	0x08004e00
 8000660:	08004e08 	.word	0x08004e08
 8000664:	08004e18 	.word	0x08004e18
 8000668:	08004e30 	.word	0x08004e30
 800066c:	08004e3c 	.word	0x08004e3c

08000670 <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 8000670:	b580      	push	{r7, lr}
 8000672:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000676:	af00      	add	r7, sp, #0
 8000678:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800067c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000680:	6018      	str	r0, [r3, #0]
 8000682:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000686:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800068a:	6019      	str	r1, [r3, #0]
 800068c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000690:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000694:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8000696:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800069a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	3304      	adds	r3, #4
 80006a4:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fefe 	bl	80044ac <memset>
	char local_buf2[30] = {0};
 80006b0:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006b4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	3304      	adds	r3, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 80006ce:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006d2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	3304      	adds	r3, #4
 80006dc:	22c4      	movs	r2, #196	; 0xc4
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fee3 	bl	80044ac <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 80006e6:	4848      	ldr	r0, [pc, #288]	; (8000808 <ESP_Send_Multi+0x198>)
 80006e8:	f000 f96c 	bl	80009c4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80006ec:	bf00      	nop
 80006ee:	4847      	ldr	r0, [pc, #284]	; (800080c <ESP_Send_Multi+0x19c>)
 80006f0:	f000 f998 	bl	8000a24 <Wait_for>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0f9      	beq.n	80006ee <ESP_Send_Multi+0x7e>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 80006fa:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006fe:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000702:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4941      	ldr	r1, [pc, #260]	; (8000810 <ESP_Send_Multi+0x1a0>)
 800070a:	f003 feaf 	bl	800446c <siprintf>
	for (int i=0; i<numberoffileds; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000714:	e01f      	b.n	8000756 <ESP_Send_Multi+0xe6>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 8000716:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800071a:	1c59      	adds	r1, r3, #1
 800071c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8000726:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	4413      	add	r3, r2
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	f107 0014 	add.w	r0, r7, #20
 8000734:	460a      	mov	r2, r1
 8000736:	4937      	ldr	r1, [pc, #220]	; (8000814 <ESP_Send_Multi+0x1a4>)
 8000738:	f003 fe98 	bl	800446c <siprintf>
		strcat (local_buf, field_buf);
 800073c:	f107 0214 	add.w	r2, r7, #20
 8000740:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f003 feb8 	bl	80044bc <strcat>
	for (int i=0; i<numberoffileds; i++)
 800074c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000750:	3301      	adds	r3, #1
 8000752:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000756:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800075a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800075e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	dbd6      	blt.n	8000716 <ESP_Send_Multi+0xa6>
	}

	strcat(local_buf, "\r\n");
 8000768:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fd2f 	bl	80001d0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800077a:	4413      	add	r3, r2
 800077c:	4a26      	ldr	r2, [pc, #152]	; (8000818 <ESP_Send_Multi+0x1a8>)
 800077e:	8811      	ldrh	r1, [r2, #0]
 8000780:	7892      	ldrb	r2, [r2, #2]
 8000782:	8019      	strh	r1, [r3, #0]
 8000784:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 8000786:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd20 	bl	80001d0 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8000796:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800079a:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 800079e:	491f      	ldr	r1, [pc, #124]	; (800081c <ESP_Send_Multi+0x1ac>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 fe63 	bl	800446c <siprintf>
	Uart_sendstring(local_buf2);
 80007a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f90a 	bl	80009c4 <Uart_sendstring>
	while (!(Wait_for(">")));
 80007b0:	bf00      	nop
 80007b2:	481b      	ldr	r0, [pc, #108]	; (8000820 <ESP_Send_Multi+0x1b0>)
 80007b4:	f000 f936 	bl	8000a24 <Wait_for>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f9      	beq.n	80007b2 <ESP_Send_Multi+0x142>

	Uart_sendstring (local_buf);
 80007be:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f8fe 	bl	80009c4 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 80007c8:	bf00      	nop
 80007ca:	4816      	ldr	r0, [pc, #88]	; (8000824 <ESP_Send_Multi+0x1b4>)
 80007cc:	f000 f92a 	bl	8000a24 <Wait_for>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f9      	beq.n	80007ca <ESP_Send_Multi+0x15a>

	while (!(Wait_for("CLOSED")));
 80007d6:	bf00      	nop
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <ESP_Send_Multi+0x1b8>)
 80007da:	f000 f923 	bl	8000a24 <Wait_for>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f9      	beq.n	80007d8 <ESP_Send_Multi+0x168>

	bufclr(local_buf);
 80007e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fec7 	bl	800057c <bufclr>
	bufclr(local_buf2);
 80007ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fec2 	bl	800057c <bufclr>

	Ringbuf_init();
 80007f8:	f000 f818 	bl	800082c <Ringbuf_init>

}
 80007fc:	bf00      	nop
 80007fe:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	08004e4c 	.word	0x08004e4c
 800080c:	08004e00 	.word	0x08004e00
 8000810:	08004ec4 	.word	0x08004ec4
 8000814:	08004edc 	.word	0x08004edc
 8000818:	08004ee8 	.word	0x08004ee8
 800081c:	08004e9c 	.word	0x08004e9c
 8000820:	08004eac 	.word	0x08004eac
 8000824:	08004eb0 	.word	0x08004eb0
 8000828:	08004ebc 	.word	0x08004ebc

0800082c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <Ringbuf_init+0x3c>)
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <Ringbuf_init+0x40>)
 8000834:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <Ringbuf_init+0x44>)
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <Ringbuf_init+0x48>)
 800083a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <Ringbuf_init+0x4c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <Ringbuf_init+0x4c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f042 0201 	orr.w	r2, r2, #1
 800084a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <Ringbuf_init+0x4c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	68da      	ldr	r2, [r3, #12]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <Ringbuf_init+0x4c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f042 0220 	orr.w	r2, r2, #32
 800085a:	60da      	str	r2, [r3, #12]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000108 	.word	0x20000108
 800086c:	20000078 	.word	0x20000078
 8000870:	2000010c 	.word	0x2000010c
 8000874:	200000c0 	.word	0x200000c0
 8000878:	2000017c 	.word	0x2000017c

0800087c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	3301      	adds	r3, #1
 800088e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000892:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	429a      	cmp	r2, r3
 800089c:	d007      	beq.n	80008ae <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	79f9      	ldrb	r1, [r7, #7]
 80008a6:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <Uart_flush>:

void Uart_flush (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <Uart_flush+0x1c>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <Uart_flush+0x1c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000108 	.word	0x20000108

080008dc <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <Uart_read+0x4c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <Uart_read+0x4c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d102      	bne.n	80008f8 <Uart_read+0x1c>
  {
    return -1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	e010      	b.n	800091a <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <Uart_read+0x4c>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <Uart_read+0x4c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	5cd3      	ldrb	r3, [r2, r3]
 8000904:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <Uart_read+0x4c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <Uart_read+0x4c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000916:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000918:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000108 	.word	0x20000108

0800092c <Uart_write>:

void Uart_write(int c)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	db21      	blt.n	800097e <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <Uart_write+0x60>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	3301      	adds	r3, #1
 8000942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000946:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000948:	bf00      	nop
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <Uart_write+0x60>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	429a      	cmp	r2, r3
 8000954:	d0f9      	beq.n	800094a <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <Uart_write+0x60>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <Uart_write+0x60>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	b2c9      	uxtb	r1, r1
 8000964:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <Uart_write+0x60>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <Uart_write+0x64>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <Uart_write+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800097c:	60da      	str	r2, [r3, #12]
	}
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	2000010c 	.word	0x2000010c
 8000990:	2000017c 	.word	0x2000017c

08000994 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <IsDataAvailable+0x2c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <IsDataAvailable+0x2c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	3340      	adds	r3, #64	; 0x40
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000108 	.word	0x20000108

080009c4 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80009cc:	e006      	b.n	80009dc <Uart_sendstring+0x18>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffa8 	bl	800092c <Uart_write>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1f4      	bne.n	80009ce <Uart_sendstring+0xa>
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <Uart_peek+0x30>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <Uart_peek+0x30>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d102      	bne.n	8000a0a <Uart_peek+0x1a>
  {
    return -1;
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	e005      	b.n	8000a16 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <Uart_peek+0x30>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <Uart_peek+0x30>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000108 	.word	0x20000108

08000a24 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fbcd 	bl	80001d0 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffaa 	bl	8000994 <IsDataAvailable>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0fa      	beq.n	8000a3c <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8000a46:	f7ff ffd3 	bl	80009f0 <Uart_peek>
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4299      	cmp	r1, r3
 8000a56:	d01a      	beq.n	8000a8e <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <Wait_for+0xa4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <Wait_for+0xa4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a68:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8000a6a:	e7e6      	b.n	8000a3a <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8000a72:	f7ff ff33 	bl	80008dc <Uart_read>
		if (so_far == len) return 1;
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d101      	bne.n	8000a82 <Wait_for+0x5e>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e01d      	b.n	8000abe <Wait_for+0x9a>
		while (!IsDataAvailable());
 8000a82:	bf00      	nop
 8000a84:	f7ff ff86 	bl	8000994 <IsDataAvailable>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0fa      	beq.n	8000a84 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8000a8e:	f7ff ffaf 	bl	80009f0 <Uart_peek>
 8000a92:	4601      	mov	r1, r0
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	d0e5      	beq.n	8000a6c <Wait_for+0x48>
	}

	if (so_far != len)
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d002      	beq.n	8000aae <Wait_for+0x8a>
	{
		so_far = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
		goto again;
 8000aac:	e7c5      	b.n	8000a3a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d101      	bne.n	8000aba <Wait_for+0x96>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e001      	b.n	8000abe <Wait_for+0x9a>
	else return -1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000108 	.word	0x20000108

08000acc <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d013      	beq.n	8000b16 <Uart_isr+0x4a>
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	f003 0320 	and.w	r3, r3, #32
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00e      	beq.n	8000b16 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <Uart_isr+0xac>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff feb4 	bl	800087c <store_char>
        return;
 8000b14:	e02c      	b.n	8000b70 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d027      	beq.n	8000b70 <Uart_isr+0xa4>
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d022      	beq.n	8000b70 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <Uart_isr+0xb0>)
 8000b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <Uart_isr+0xb0>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d108      	bne.n	8000b48 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b44:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000b46:	e012      	b.n	8000b6e <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <Uart_isr+0xb0>)
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <Uart_isr+0xb0>)
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <Uart_isr+0xb0>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	3301      	adds	r3, #1
 8000b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <Uart_isr+0xb0>)
 8000b5e:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	7bba      	ldrb	r2, [r7, #14]
 8000b6c:	605a      	str	r2, [r3, #4]
    	return;
 8000b6e:	bf00      	nop
    }
}
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000108 	.word	0x20000108
 8000b7c:	200000c0 	.word	0x200000c0

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f000 fd1e 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f86c 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f000 f95e 	bl	8000e4c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b90:	f000 f8d2 	bl	8000d38 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000b94:	f000 f930 	bl	8000df8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000b98:	f000 f904 	bl	8000da4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN1_Filter();
 8000b9c:	f000 f9b6 	bl	8000f0c <CAN1_Filter>
 if (HAL_CAN_Start(&hcan1) !=HAL_OK)
 8000ba0:	4826      	ldr	r0, [pc, #152]	; (8000c3c <main+0xbc>)
 8000ba2:	f000 ff81 	bl	8001aa8 <HAL_CAN_Start>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <main+0x30>
  {
	  Error_Handler();
 8000bac:	f000 fb1e 	bl	80011ec <Error_Handler>
  }
 if (HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY )!= HAL_OK)
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	4822      	ldr	r0, [pc, #136]	; (8000c3c <main+0xbc>)
 8000bb4:	f001 f9a9 	bl	8001f0a <HAL_CAN_ActivateNotification>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <main+0x42>
  {
    Error_Handler();
 8000bbe:	f000 fb15 	bl	80011ec <Error_Handler>
  }

 HAL_UART_Receive_IT(&huart2, QtRxData, sizeof(QtRxData));
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	491e      	ldr	r1, [pc, #120]	; (8000c40 <main+0xc0>)
 8000bc6:	481f      	ldr	r0, [pc, #124]	; (8000c44 <main+0xc4>)
 8000bc8:	f002 fcb7 	bl	800353a <HAL_UART_Receive_IT>
 ESP_Init("Redmi","09876543210X");
 8000bcc:	491e      	ldr	r1, [pc, #120]	; (8000c48 <main+0xc8>)
 8000bce:	481f      	ldr	r0, [pc, #124]	; (8000c4c <main+0xcc>)
 8000bd0:	f7ff fcf2 	bl	80005b8 <ESP_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ( 1 == Flag )
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <main+0xd0>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d108      	bne.n	8000bee <main+0x6e>
	    {
		      HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 8000bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be0:	481c      	ldr	r0, [pc, #112]	; (8000c54 <main+0xd4>)
 8000be2:	f001 ff18 	bl	8002a16 <HAL_GPIO_TogglePin>
              Flag = 0;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <main+0xd0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	e7f2      	b.n	8000bd4 <main+0x54>

         }
	  else if ( 2 == Flag )
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <main+0xd0>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d108      	bne.n	8000c08 <main+0x88>
		  {
			  HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 8000bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfa:	4816      	ldr	r0, [pc, #88]	; (8000c54 <main+0xd4>)
 8000bfc:	f001 ff0b 	bl	8002a16 <HAL_GPIO_TogglePin>
			  Flag = 0;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <main+0xd0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e7e5      	b.n	8000bd4 <main+0x54>
		  }
	  else if ( 3 == Flag )
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <main+0xd0>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d1e1      	bne.n	8000bd4 <main+0x54>
		  {
			  HAL_GPIO_TogglePin(BLUE_GPIO_Port, BLUE_Pin);
 8000c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c14:	480f      	ldr	r0, [pc, #60]	; (8000c54 <main+0xd4>)
 8000c16:	f001 fefe 	bl	8002a16 <HAL_GPIO_TogglePin>
			  send_data_uart(aRxDatac, sizeof(aRxDatac));
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	480e      	ldr	r0, [pc, #56]	; (8000c58 <main+0xd8>)
 8000c1e:	f000 fa99 	bl	8001154 <send_data_uart>
              ESP_Send_Multi("Q2II80D9IDVPRW74",5,aRxDataT);
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <main+0xdc>)
 8000c24:	2105      	movs	r1, #5
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <main+0xe0>)
 8000c28:	f7ff fd22 	bl	8000670 <ESP_Send_Multi>
		      HAL_Delay(1000);
 8000c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c30:	f000 fd3a 	bl	80016a8 <HAL_Delay>
              Flag = 0;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <main+0xd0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
	  if ( 1 == Flag )
 8000c3a:	e7cb      	b.n	8000bd4 <main+0x54>
 8000c3c:	20000110 	.word	0x20000110
 8000c40:	200001dc 	.word	0x200001dc
 8000c44:	20000138 	.word	0x20000138
 8000c48:	08004eec 	.word	0x08004eec
 8000c4c:	08004efc 	.word	0x08004efc
 8000c50:	200001d9 	.word	0x200001d9
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	200001d4 	.word	0x200001d4
 8000c5c:	200001c8 	.word	0x200001c8
 8000c60:	08004f04 	.word	0x08004f04

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	; 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	2230      	movs	r2, #48	; 0x30
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 fc1a 	bl	80044ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <SystemClock_Config+0xd0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <SystemClock_Config+0xd0>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <SystemClock_Config+0xd0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000cd8:	2332      	movs	r3, #50	; 0x32
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 feaf 	bl	8002a4c <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf4:	f000 fa7a 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2101      	movs	r1, #1
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 f910 	bl	8002f3c <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d22:	f000 fa63 	bl	80011ec <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	; 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <MX_CAN1_Init+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d44:	2205      	movs	r2, #5
 8000d46:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d56:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d5a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_CAN1_Init+0x64>)
 8000d88:	f000 fcb2 	bl	80016f0 <HAL_CAN_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000d92:	f000 fa2b 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000110 	.word	0x20000110
 8000da0:	40006400 	.word	0x40006400

08000da4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <MX_USART2_UART_Init+0x50>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	f002 face 	bl	800337c <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000de6:	f000 fa01 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000138 	.word	0x20000138
 8000df4:	40004400 	.word	0x40004400

08000df8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MX_USART3_UART_Init+0x50>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_USART3_UART_Init+0x4c>)
 8000e30:	f002 faa4 	bl	800337c <HAL_UART_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e3a:	f000 f9d7 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000017c 	.word	0x2000017c
 8000e48:	40004800 	.word	0x40004800

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a11      	ldr	r2, [pc, #68]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_GPIO_Init+0xb8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_Pin|ORANGE_Pin|RED_Pin|BLUE_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <MX_GPIO_Init+0xbc>)
 8000eda:	f001 fd83 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_Pin ORANGE_Pin RED_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin|ORANGE_Pin|RED_Pin|BLUE_Pin;
 8000ede:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_GPIO_Init+0xbc>)
 8000ef8:	f001 fbd8 	bl	80026ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <CAN1_Filter>:

/* USER CODE BEGIN 4 */
static void CAN1_Filter(void)
 {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 	CAN_FilterTypeDef can1_filter_init;
 	can1_filter_init.FilterActivation = ENABLE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
 	can1_filter_init.FilterBank = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 	can1_filter_init.FilterIdHigh = 0x4FF<<5;
 8000f1e:	f649 73e0 	movw	r3, #40928	; 0x9fe0
 8000f22:	603b      	str	r3, [r7, #0]
 	can1_filter_init.FilterIdLow = 0x0000;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
 	can1_filter_init.FilterMaskIdHigh = 0x8FF<<5;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <CAN1_Filter+0x48>)
 8000f2a:	60bb      	str	r3, [r7, #8]
 	can1_filter_init.FilterMaskIdLow = 0x0000;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
 	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <CAN1_Filter+0x4c>)
 8000f3e:	f000 fcd3 	bl	80018e8 <HAL_CAN_ConfigFilter>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <CAN1_Filter+0x40>
 	{
 		Error_Handler();
 8000f48:	f000 f950 	bl	80011ec <Error_Handler>
 	}
 }
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	00011fe0 	.word	0x00011fe0
 8000f58:	20000110 	.word	0x20000110

08000f5c <CAN1_Rx>:
 static void CAN1_Rx(void)
 {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

 	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, aRxData) != HAL_OK)
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <CAN1_Rx+0xd4>)
 8000f64:	4a33      	ldr	r2, [pc, #204]	; (8001034 <CAN1_Rx+0xd8>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4833      	ldr	r0, [pc, #204]	; (8001038 <CAN1_Rx+0xdc>)
 8000f6a:	f000 febc 	bl	8001ce6 <HAL_CAN_GetRxMessage>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <CAN1_Rx+0x1c>
 	{
 		Error_Handler();
 8000f74:	f000 f93a 	bl	80011ec <Error_Handler>
 	}
 	if (RxHeader.RTR == DOMINANT  )
 8000f78:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <CAN1_Rx+0xd8>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d153      	bne.n	8001028 <CAN1_Rx+0xcc>
 		HAL_GPIO_WritePin(ORANGE_GPIO_Port,ORANGE_Pin,RESET);
 		HAL_GPIO_WritePin(RED_GPIO_Port,RED_Pin,RESET);

 	}
 	*/
 	if (RxHeader.StdId == 0x0FF || RxHeader.StdId == 0x1FF || RxHeader.StdId == 0x3FF ){
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <CAN1_Rx+0xd8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2bff      	cmp	r3, #255	; 0xff
 8000f86:	d00b      	beq.n	8000fa0 <CAN1_Rx+0x44>
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <CAN1_Rx+0xd8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d005      	beq.n	8000fa0 <CAN1_Rx+0x44>
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <CAN1_Rx+0xd8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d11b      	bne.n	8000fd8 <CAN1_Rx+0x7c>
 		for(int i = 0; i < 3; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	e014      	b.n	8000fd0 <CAN1_Rx+0x74>
 			aRxDatac[i] = aRxData[i];
 8000fa6:	4a22      	ldr	r2, [pc, #136]	; (8001030 <CAN1_Rx+0xd4>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	7819      	ldrb	r1, [r3, #0]
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <CAN1_Rx+0xe0>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	701a      	strb	r2, [r3, #0]
 			aRxDataT[i] = aRxData[i];
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <CAN1_Rx+0xd4>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <CAN1_Rx+0xe4>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 		for(int i = 0; i < 3; i++) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	dde7      	ble.n	8000fa6 <CAN1_Rx+0x4a>
 8000fd6:	e027      	b.n	8001028 <CAN1_Rx+0xcc>
 		}
 	}
 	else if (RxHeader.StdId == 0x2FF || RxHeader.StdId == 0x4FF ){
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <CAN1_Rx+0xd8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d005      	beq.n	8000ff0 <CAN1_Rx+0x94>
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <CAN1_Rx+0xd8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d11b      	bne.n	8001028 <CAN1_Rx+0xcc>
 		for(int i = 0; i < 2; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	e014      	b.n	8001020 <CAN1_Rx+0xc4>
 			aRxDatac[i+3] = aRxData[i+3];
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	1cda      	adds	r2, r3, #3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	490c      	ldr	r1, [pc, #48]	; (8001030 <CAN1_Rx+0xd4>)
 8001000:	5c89      	ldrb	r1, [r1, r2]
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <CAN1_Rx+0xe0>)
 8001004:	54d1      	strb	r1, [r2, r3]
 			aRxDataT[i+3] = aRxData[i+3];
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	3303      	adds	r3, #3
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <CAN1_Rx+0xd4>)
 800100c:	5cd2      	ldrb	r2, [r2, r3]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3303      	adds	r3, #3
 8001012:	b291      	uxth	r1, r2
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <CAN1_Rx+0xe4>)
 8001016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 		for(int i = 0; i < 2; i++) {
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	dde7      	ble.n	8000ff6 <CAN1_Rx+0x9a>
 		}
 	}
 }
 }
 8001026:	e7ff      	b.n	8001028 <CAN1_Rx+0xcc>
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200001c0 	.word	0x200001c0
 8001034:	200001e8 	.word	0x200001e8
 8001038:	20000110 	.word	0x20000110
 800103c:	200001d4 	.word	0x200001d4
 8001040:	200001c8 	.word	0x200001c8

08001044 <HAL_CAN_TxMailbox0CompleteCallback>:
 void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
  {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 		if (hcan->Instance== CAN1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d102      	bne.n	800105c <HAL_CAN_TxMailbox0CompleteCallback+0x18>
 		{
 			Flag=1;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_CAN_TxMailbox0CompleteCallback+0x28>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 	    }


  }
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40006400 	.word	0x40006400
 800106c:	200001d9 	.word	0x200001d9

08001070 <HAL_CAN_TxMailbox1CompleteCallback>:

  void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
  {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 		if (hcan->Instance== CAN1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d102      	bne.n	8001088 <HAL_CAN_TxMailbox1CompleteCallback+0x18>
 		{
 			Flag=1;
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_CAN_TxMailbox1CompleteCallback+0x28>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 	    }

  }
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40006400 	.word	0x40006400
 8001098:	200001d9 	.word	0x200001d9

0800109c <HAL_CAN_TxMailbox2CompleteCallback>:

 void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
  {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 		if (hcan->Instance== CAN1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d102      	bne.n	80010b4 <HAL_CAN_TxMailbox2CompleteCallback+0x18>
 		{
 			Flag=1;
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_CAN_TxMailbox2CompleteCallback+0x28>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
 	    }

  }
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40006400 	.word	0x40006400
 80010c4:	200001d9 	.word	0x200001d9

080010c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	 if (hcan->Instance== CAN1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d104      	bne.n	80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
	{
		 CAN1_Rx();
 80010da:	f7ff ff3f 	bl	8000f5c <CAN1_Rx>
	     Flag=3;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80010e0:	2203      	movs	r2, #3
 80010e2:	701a      	strb	r2, [r3, #0]
	}

 }
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40006400 	.word	0x40006400
 80010f0:	200001d9 	.word	0x200001d9

080010f4 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if (hcan->Instance== CAN1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a05      	ldr	r2, [pc, #20]	; (8001118 <HAL_CAN_ErrorCallback+0x24>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d102      	bne.n	800110c <HAL_CAN_ErrorCallback+0x18>
	{
	 	 Flag=2;
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_CAN_ErrorCallback+0x28>)
 8001108:	2202      	movs	r2, #2
 800110a:	701a      	strb	r2, [r3, #0]
	}

 }
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40006400 	.word	0x40006400
 800111c:	200001d9 	.word	0x200001d9

08001120 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_UART_RxCpltCallback+0x28>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d106      	bne.n	8001140 <HAL_UART_RxCpltCallback+0x20>
	  {

		  HAL_UART_Receive_IT(&huart2, QtRxData, sizeof(QtRxData));
 8001132:	2202      	movs	r2, #2
 8001134:	4905      	ldr	r1, [pc, #20]	; (800114c <HAL_UART_RxCpltCallback+0x2c>)
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <HAL_UART_RxCpltCallback+0x30>)
 8001138:	f002 f9ff 	bl	800353a <HAL_UART_Receive_IT>
		  CAN1_Tx();
 800113c:	f000 f81e 	bl	800117c <CAN1_Tx>

	  }

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004400 	.word	0x40004400
 800114c:	200001dc 	.word	0x200001dc
 8001150:	20000138 	.word	0x20000138

08001154 <send_data_uart>:

 static void send_data_uart(uint8_t *data, uint8_t size) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	   HAL_UART_Transmit(&huart2,  data, size, HAL_MAX_DELAY);
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	b29a      	uxth	r2, r3
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <send_data_uart+0x24>)
 800116c:	f002 f953 	bl	8003416 <HAL_UART_Transmit>
	}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000138 	.word	0x20000138

0800117c <CAN1_Tx>:
     for (size_t i = 0; i < length; i++) {
         output[i] = (uint16_t)input[i];
     }
 }
 static void CAN1_Tx(void)
 {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 	CAN_TxHeaderTypeDef TxHeader;
 	aTxData[0] = QtRxData[0];
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <CAN1_Tx+0x60>)
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <CAN1_Tx+0x64>)
 8001188:	701a      	strb	r2, [r3, #0]
 	aTxData[1] = QtRxData[1];
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <CAN1_Tx+0x60>)
 800118c:	785a      	ldrb	r2, [r3, #1]
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <CAN1_Tx+0x64>)
 8001190:	705a      	strb	r2, [r3, #1]
 	if (0 == aTxData[0])
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <CAN1_Tx+0x64>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <CAN1_Tx+0x24>
 	{
 		TxHeader.StdId= 0x0EF;
 800119a:	23ef      	movs	r3, #239	; 0xef
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	e006      	b.n	80011ae <CAN1_Tx+0x32>
 	}
 	else if (1 == aTxData[0])
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <CAN1_Tx+0x64>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <CAN1_Tx+0x32>
 	{
 		TxHeader.StdId= 0x1EF;
 80011a8:	f240 13ef 	movw	r3, #495	; 0x1ef
 80011ac:	603b      	str	r3, [r7, #0]
 	}

 	TxHeader.RTR= CAN_RTR_DATA;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 	TxHeader.IDE= CAN_ID_STD;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 	TxHeader.DLC= 2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
 	TxHeader.TransmitGlobalTime = DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	753b      	strb	r3, [r7, #20]
 	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader,aTxData , &TxMailbox) != HAL_OK)
 80011be:	4639      	mov	r1, r7
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <CAN1_Tx+0x68>)
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <CAN1_Tx+0x64>)
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <CAN1_Tx+0x6c>)
 80011c6:	f000 fcb3 	bl	8001b30 <HAL_CAN_AddTxMessage>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <CAN1_Tx+0x58>
 	{
 		Error_Handler();
 80011d0:	f000 f80c 	bl	80011ec <Error_Handler>
 	}
 }
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200001dc 	.word	0x200001dc
 80011e0:	200001e0 	.word	0x200001e0
 80011e4:	200001e4 	.word	0x200001e4
 80011e8:	20000110 	.word	0x20000110

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001236:	2007      	movs	r0, #7
 8001238:	f001 f964 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_CAN_MspInit+0xb4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d144      	bne.n	80012f4 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_CAN_MspInit+0xb8>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a23      	ldr	r2, [pc, #140]	; (8001300 <HAL_CAN_MspInit+0xb8>)
 8001274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_CAN_MspInit+0xb8>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_CAN_MspInit+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_CAN_MspInit+0xb8>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_CAN_MspInit+0xb8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012b4:	2309      	movs	r3, #9
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <HAL_CAN_MspInit+0xbc>)
 80012c0:	f001 f9f4 	bl	80026ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2013      	movs	r0, #19
 80012ca:	f001 f926 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80012ce:	2013      	movs	r0, #19
 80012d0:	f001 f93f 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	2014      	movs	r0, #20
 80012da:	f001 f91e 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012de:	2014      	movs	r0, #20
 80012e0:	f001 f937 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2016      	movs	r0, #22
 80012ea:	f001 f916 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80012ee:	2016      	movs	r0, #22
 80012f0:	f001 f92f 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40006400 	.word	0x40006400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a3a      	ldr	r2, [pc, #232]	; (8001410 <HAL_UART_MspInit+0x108>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d134      	bne.n	8001394 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a38      	ldr	r2, [pc, #224]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a31      	ldr	r2, [pc, #196]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001362:	230c      	movs	r3, #12
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001372:	2307      	movs	r3, #7
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	4826      	ldr	r0, [pc, #152]	; (8001418 <HAL_UART_MspInit+0x110>)
 800137e:	f001 f995 	bl	80026ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2026      	movs	r0, #38	; 0x26
 8001388:	f001 f8c7 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800138c:	2026      	movs	r0, #38	; 0x26
 800138e:	f001 f8e0 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001392:	e039      	b.n	8001408 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_UART_MspInit+0x114>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d134      	bne.n	8001408 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e8:	2307      	movs	r3, #7
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <HAL_UART_MspInit+0x118>)
 80013f4:	f001 f95a 	bl	80026ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2027      	movs	r0, #39	; 0x27
 80013fe:	f001 f88c 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001402:	2027      	movs	r0, #39	; 0x27
 8001404:	f001 f8a5 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 8001408:	bf00      	nop
 800140a:	3730      	adds	r7, #48	; 0x30
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40004400 	.word	0x40004400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000
 800141c:	40004800 	.word	0x40004800
 8001420:	40020c00 	.word	0x40020c00

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f8fa 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <CAN1_TX_IRQHandler+0x10>)
 800147e:	f000 fd6a 	bl	8001f56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000110 	.word	0x20000110

0800148c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <CAN1_RX0_IRQHandler+0x10>)
 8001492:	f000 fd60 	bl	8001f56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000110 	.word	0x20000110

080014a0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <CAN1_SCE_IRQHandler+0x10>)
 80014a6:	f000 fd56 	bl	8001f56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000110 	.word	0x20000110

080014b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <USART2_IRQHandler+0x10>)
 80014ba:	f002 f86f 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000138 	.word	0x20000138

080014c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <USART3_IRQHandler+0x14>)
 80014ce:	f7ff fafd 	bl	8000acc <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014d2:	4802      	ldr	r0, [pc, #8]	; (80014dc <USART3_IRQHandler+0x14>)
 80014d4:	f002 f862 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000017c 	.word	0x2000017c

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f002 ffe4 	bl	80044dc <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20020000 	.word	0x20020000
 8001540:	00000400 	.word	0x00000400
 8001544:	20000204 	.word	0x20000204
 8001548:	20000358 	.word	0x20000358

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159a:	f7ff ffd7 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f002 ffa3 	bl	80044e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff faed 	bl	8000b80 <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015b4:	08004f74 	.word	0x08004f74
  ldr r2, =_sbss
 80015b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015bc:	20000354 	.word	0x20000354

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 ff89 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fdfe 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 ffa1 	bl	800256e <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 ff69 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000000 	.word	0x20000000
 8001660:	20000008 	.word	0x20000008
 8001664:	20000004 	.word	0x20000004

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008
 800168c:	20000208 	.word	0x20000208

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000208 	.word	0x20000208

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008

080016f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0ed      	b.n	80018de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fd9a 	bl	8001248 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001724:	f7ff ffb4 	bl	8001690 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800172a:	e012      	b.n	8001752 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800172c:	f7ff ffb0 	bl	8001690 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b0a      	cmp	r3, #10
 8001738:	d90b      	bls.n	8001752 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2205      	movs	r2, #5
 800174a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0c5      	b.n	80018de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0e5      	beq.n	800172c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0202 	bic.w	r2, r2, #2
 800176e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001770:	f7ff ff8e 	bl	8001690 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001776:	e012      	b.n	800179e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001778:	f7ff ff8a 	bl	8001690 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b0a      	cmp	r3, #10
 8001784:	d90b      	bls.n	800179e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2205      	movs	r2, #5
 8001796:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e09f      	b.n	80018de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e5      	bne.n	8001778 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7e1b      	ldrb	r3, [r3, #24]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d108      	bne.n	80017c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e007      	b.n	80017d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7e5b      	ldrb	r3, [r3, #25]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d108      	bne.n	80017f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e007      	b.n	8001800 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7e9b      	ldrb	r3, [r3, #26]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d108      	bne.n	800181a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	e007      	b.n	800182a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0220 	bic.w	r2, r2, #32
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7edb      	ldrb	r3, [r3, #27]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d108      	bne.n	8001844 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0210 	bic.w	r2, r2, #16
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e007      	b.n	8001854 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0210 	orr.w	r2, r2, #16
 8001852:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7f1b      	ldrb	r3, [r3, #28]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d108      	bne.n	800186e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0208 	orr.w	r2, r2, #8
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e007      	b.n	800187e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0208 	bic.w	r2, r2, #8
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7f5b      	ldrb	r3, [r3, #29]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0204 	orr.w	r2, r2, #4
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e007      	b.n	80018a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0204 	bic.w	r2, r2, #4
 80018a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	ea42 0103 	orr.w	r1, r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d003      	beq.n	800190e <HAL_CAN_ConfigFilter+0x26>
 8001906:	7cfb      	ldrb	r3, [r7, #19]
 8001908:	2b02      	cmp	r3, #2
 800190a:	f040 80be 	bne.w	8001a8a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800190e:	4b65      	ldr	r3, [pc, #404]	; (8001aa4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001910:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001928:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	431a      	orrs	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2201      	movs	r2, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	401a      	ands	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d123      	bne.n	80019b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43db      	mvns	r3, r3
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001992:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3248      	adds	r2, #72	; 0x48
 8001998:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019ae:	6979      	ldr	r1, [r7, #20]
 80019b0:	3348      	adds	r3, #72	; 0x48
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d122      	bne.n	8001a06 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3248      	adds	r2, #72	; 0x48
 80019e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019fc:	6979      	ldr	r1, [r7, #20]
 80019fe:	3348      	adds	r3, #72	; 0x48
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001a20:	e007      	b.n	8001a32 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	401a      	ands	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001a4c:	e007      	b.n	8001a5e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a7c:	f023 0201 	bic.w	r2, r3, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e006      	b.n	8001a98 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
  }
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40006400 	.word	0x40006400

08001aa8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d12e      	bne.n	8001b1a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ad4:	f7ff fddc 	bl	8001690 <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ada:	e012      	b.n	8001b02 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001adc:	f7ff fdd8 	bl	8001690 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d90b      	bls.n	8001b02 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2205      	movs	r2, #5
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e012      	b.n	8001b28 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e5      	bne.n	8001adc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e006      	b.n	8001b28 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
  }
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b44:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d003      	beq.n	8001b5c <HAL_CAN_AddTxMessage+0x2c>
 8001b54:	7ffb      	ldrb	r3, [r7, #31]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	f040 80b8 	bne.w	8001ccc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10a      	bne.n	8001b7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80a0 	beq.w	8001cbc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	0e1b      	lsrs	r3, r3, #24
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d907      	bls.n	8001b9c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e09e      	b.n	8001cda <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bb8:	68f9      	ldr	r1, [r7, #12]
 8001bba:	6809      	ldr	r1, [r1, #0]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3318      	adds	r3, #24
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	440b      	add	r3, r1
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e00f      	b.n	8001bea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bd4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bda:	68f9      	ldr	r1, [r7, #12]
 8001bdc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bde:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3318      	adds	r3, #24
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	440b      	add	r3, r1
 8001be8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	7d1b      	ldrb	r3, [r3, #20]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d111      	bne.n	8001c2a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3318      	adds	r3, #24
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	6811      	ldr	r1, [r2, #0]
 8001c1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3318      	adds	r3, #24
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	440b      	add	r3, r1
 8001c26:	3304      	adds	r3, #4
 8001c28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3307      	adds	r3, #7
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	061a      	lsls	r2, r3, #24
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3306      	adds	r3, #6
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3305      	adds	r3, #5
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	4313      	orrs	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	3204      	adds	r2, #4
 8001c4a:	7812      	ldrb	r2, [r2, #0]
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	6811      	ldr	r1, [r2, #0]
 8001c52:	ea43 0200 	orr.w	r2, r3, r0
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3303      	adds	r3, #3
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	061a      	lsls	r2, r3, #24
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	4610      	mov	r0, r2
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	6811      	ldr	r1, [r2, #0]
 8001c88:	ea43 0200 	orr.w	r2, r3, r0
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	440b      	add	r3, r1
 8001c92:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3318      	adds	r3, #24
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	4413      	add	r3, r2
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	6811      	ldr	r1, [r2, #0]
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3318      	adds	r3, #24
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	440b      	add	r3, r1
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e00e      	b.n	8001cda <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e006      	b.n	8001cda <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
  }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b087      	sub	sp, #28
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d003      	beq.n	8001d0a <HAL_CAN_GetRxMessage+0x24>
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	f040 80f3 	bne.w	8001ef0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10e      	bne.n	8001d2e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0e7      	b.n	8001efe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0d8      	b.n	8001efe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	331b      	adds	r3, #27
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0204 	and.w	r2, r3, #4
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	331b      	adds	r3, #27
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	4413      	add	r3, r2
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0d5b      	lsrs	r3, r3, #21
 8001d7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	331b      	adds	r3, #27
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	4413      	add	r3, r2
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	331b      	adds	r3, #27
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	4413      	add	r3, r2
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0202 	and.w	r2, r3, #2
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	331b      	adds	r3, #27
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 020f 	and.w	r2, r3, #15
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	331b      	adds	r3, #27
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	331b      	adds	r3, #27
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0a1a      	lsrs	r2, r3, #8
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0c1a      	lsrs	r2, r3, #16
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0e1a      	lsrs	r2, r3, #24
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3304      	adds	r3, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0a1a      	lsrs	r2, r3, #8
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	3305      	adds	r3, #5
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0c1a      	lsrs	r2, r3, #16
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3306      	adds	r3, #6
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0e1a      	lsrs	r2, r3, #24
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	3307      	adds	r3, #7
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d108      	bne.n	8001edc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0220 	orr.w	r2, r2, #32
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	e007      	b.n	8001eec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0220 	orr.w	r2, r2, #32
 8001eea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e006      	b.n	8001efe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d002      	beq.n	8001f28 <HAL_CAN_ActivateNotification+0x1e>
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d109      	bne.n	8001f3c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6959      	ldr	r1, [r3, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e006      	b.n	8001f4a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b08a      	sub	sp, #40	; 0x28
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d07c      	beq.n	8002096 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d023      	beq.n	8001fee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2201      	movs	r2, #1
 8001fac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff f843 	bl	8001044 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fbe:	e016      	b.n	8001fee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	e00c      	b.n	8001fee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	e002      	b.n	8001fee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f96b 	bl	80022c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d024      	beq.n	8002042 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002000:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff f82f 	bl	8001070 <HAL_CAN_TxMailbox1CompleteCallback>
 8002012:	e016      	b.n	8002042 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d004      	beq.n	8002028 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
 8002026:	e00c      	b.n	8002042 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	e002      	b.n	8002042 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f94b 	bl	80022d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d024      	beq.n	8002096 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002054:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff f81b 	bl	800109c <HAL_CAN_TxMailbox2CompleteCallback>
 8002066:	e016      	b.n	8002096 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	e00c      	b.n	8002096 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	e002      	b.n	8002096 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f92b 	bl	80022ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00c      	beq.n	80020ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2210      	movs	r2, #16
 80020b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00b      	beq.n	80020dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2208      	movs	r2, #8
 80020d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f912 	bl	8002300 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7fe ffe7 	bl	80010c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00c      	beq.n	800211e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002114:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2210      	movs	r2, #16
 800211c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2208      	movs	r2, #8
 8002138:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8f4 	bl	8002328 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f8db 	bl	8002314 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2210      	movs	r2, #16
 8002178:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8de 	bl	800233c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2208      	movs	r2, #8
 800219a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f8d7 	bl	8002350 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d07b      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d072      	beq.n	800229c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002210:	2b00      	cmp	r3, #0
 8002212:	d043      	beq.n	800229c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800221a:	2b00      	cmp	r3, #0
 800221c:	d03e      	beq.n	800229c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002224:	2b60      	cmp	r3, #96	; 0x60
 8002226:	d02b      	beq.n	8002280 <HAL_CAN_IRQHandler+0x32a>
 8002228:	2b60      	cmp	r3, #96	; 0x60
 800222a:	d82e      	bhi.n	800228a <HAL_CAN_IRQHandler+0x334>
 800222c:	2b50      	cmp	r3, #80	; 0x50
 800222e:	d022      	beq.n	8002276 <HAL_CAN_IRQHandler+0x320>
 8002230:	2b50      	cmp	r3, #80	; 0x50
 8002232:	d82a      	bhi.n	800228a <HAL_CAN_IRQHandler+0x334>
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d019      	beq.n	800226c <HAL_CAN_IRQHandler+0x316>
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d826      	bhi.n	800228a <HAL_CAN_IRQHandler+0x334>
 800223c:	2b30      	cmp	r3, #48	; 0x30
 800223e:	d010      	beq.n	8002262 <HAL_CAN_IRQHandler+0x30c>
 8002240:	2b30      	cmp	r3, #48	; 0x30
 8002242:	d822      	bhi.n	800228a <HAL_CAN_IRQHandler+0x334>
 8002244:	2b10      	cmp	r3, #16
 8002246:	d002      	beq.n	800224e <HAL_CAN_IRQHandler+0x2f8>
 8002248:	2b20      	cmp	r3, #32
 800224a:	d005      	beq.n	8002258 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800224c:	e01d      	b.n	800228a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002256:	e019      	b.n	800228c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	f043 0310 	orr.w	r3, r3, #16
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002260:	e014      	b.n	800228c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	f043 0320 	orr.w	r3, r3, #32
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800226a:	e00f      	b.n	800228c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002274:	e00a      	b.n	800228c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800227e:	e005      	b.n	800228c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002288:	e000      	b.n	800228c <HAL_CAN_IRQHandler+0x336>
            break;
 800228a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800229a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2204      	movs	r2, #4
 80022a2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe ff1c 	bl	80010f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022bc:	bf00      	nop
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff3e 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff8e 	bl	8002458 <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff31 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff f87c 	bl	8001690 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d008      	beq.n	80025b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e052      	b.n	800265e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0216 	bic.w	r2, r2, #22
 80025c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_DMA_Abort+0x62>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0208 	bic.w	r2, r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002608:	e013      	b.n	8002632 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260a:	f7ff f841 	bl	8001690 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b05      	cmp	r3, #5
 8002616:	d90c      	bls.n	8002632 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e015      	b.n	800265e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e4      	bne.n	800260a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	223f      	movs	r2, #63	; 0x3f
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d004      	beq.n	8002684 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e00c      	b.n	800269e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2205      	movs	r2, #5
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e16b      	b.n	80029a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 815a 	bne.w	800299a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d005      	beq.n	80026fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d130      	bne.n	8002760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80b4 	beq.w	800299a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b60      	ldr	r3, [pc, #384]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a5f      	ldr	r2, [pc, #380]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284e:	4a5b      	ldr	r2, [pc, #364]	; (80029bc <HAL_GPIO_Init+0x310>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_GPIO_Init+0x314>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <HAL_GPIO_Init+0x226>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a51      	ldr	r2, [pc, #324]	; (80029c4 <HAL_GPIO_Init+0x318>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d025      	beq.n	80028ce <HAL_GPIO_Init+0x222>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_GPIO_Init+0x31c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_GPIO_Init+0x21e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_GPIO_Init+0x320>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x21a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4e      	ldr	r2, [pc, #312]	; (80029d0 <HAL_GPIO_Init+0x324>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x216>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4d      	ldr	r2, [pc, #308]	; (80029d4 <HAL_GPIO_Init+0x328>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x212>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4c      	ldr	r2, [pc, #304]	; (80029d8 <HAL_GPIO_Init+0x32c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x20e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4b      	ldr	r2, [pc, #300]	; (80029dc <HAL_GPIO_Init+0x330>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x20a>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e00e      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028b6:	2308      	movs	r3, #8
 80028b8:	e00c      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ba:	2306      	movs	r3, #6
 80028bc:	e00a      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028be:	2305      	movs	r3, #5
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028c2:	2304      	movs	r3, #4
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028d2:	2300      	movs	r3, #0
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e4:	4935      	ldr	r1, [pc, #212]	; (80029bc <HAL_GPIO_Init+0x310>)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_GPIO_Init+0x334>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002916:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800291c:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <HAL_GPIO_Init+0x334>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_GPIO_Init+0x334>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002994:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3301      	adds	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	f67f ae90 	bls.w	80026c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40021400 	.word	0x40021400
 80029d8:	40021800 	.word	0x40021800
 80029dc:	40021c00 	.word	0x40021c00
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a28:	887a      	ldrh	r2, [r7, #2]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	041a      	lsls	r2, r3, #16
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43d9      	mvns	r1, r3
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	400b      	ands	r3, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	619a      	str	r2, [r3, #24]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e267      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d075      	beq.n	8002b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6a:	4b88      	ldr	r3, [pc, #544]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a76:	4b85      	ldr	r3, [pc, #532]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a82:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	4b7e      	ldr	r3, [pc, #504]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05b      	beq.n	8002b54 <HAL_RCC_OscConfig+0x108>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d157      	bne.n	8002b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e242      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x74>
 8002ab2:	4b76      	ldr	r3, [pc, #472]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a75      	ldr	r2, [pc, #468]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x98>
 8002aca:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6f      	ldr	r2, [pc, #444]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a6c      	ldr	r2, [pc, #432]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ae4:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fdc4 	bl	8001690 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fdc0 	bl	8001690 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e207      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xc0>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fdb0 	bl	8001690 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe fdac 	bl	8001690 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1f3      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0xe8>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b62:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7a:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1c7      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4937      	ldr	r1, [pc, #220]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	e03a      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_RCC_OscConfig+0x244>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fd65 	bl	8001690 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bca:	f7fe fd61 	bl	8001690 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1a8      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4925      	ldr	r1, [pc, #148]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCC_OscConfig+0x244>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fd44 	bl	8001690 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fd40 	bl	8001690 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e187      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d036      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_RCC_OscConfig+0x248>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fe fd24 	bl	8001690 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fd20 	bl	8001690 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e167      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x200>
 8002c6a:	e01b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x248>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fd0d 	bl	8001690 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	e00e      	b.n	8002c98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7a:	f7fe fd09 	bl	8001690 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d907      	bls.n	8002c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e150      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	42470000 	.word	0x42470000
 8002c94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	4b88      	ldr	r3, [pc, #544]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ea      	bne.n	8002c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8097 	beq.w	8002de0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b81      	ldr	r3, [pc, #516]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	4b7d      	ldr	r3, [pc, #500]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a7c      	ldr	r2, [pc, #496]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b7a      	ldr	r3, [pc, #488]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b77      	ldr	r3, [pc, #476]	; (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b74      	ldr	r3, [pc, #464]	; (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a73      	ldr	r2, [pc, #460]	; (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fcc9 	bl	8001690 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe fcc5 	bl	8001690 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e10c      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2ea>
 8002d28:	4b64      	ldr	r3, [pc, #400]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2c:	4a63      	ldr	r2, [pc, #396]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6713      	str	r3, [r2, #112]	; 0x70
 8002d34:	e01c      	b.n	8002d70 <HAL_RCC_OscConfig+0x324>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b05      	cmp	r3, #5
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x30c>
 8002d3e:	4b5f      	ldr	r3, [pc, #380]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a5e      	ldr	r2, [pc, #376]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4a:	4b5c      	ldr	r3, [pc, #368]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a5b      	ldr	r2, [pc, #364]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0x324>
 8002d58:	4b58      	ldr	r3, [pc, #352]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a57      	ldr	r2, [pc, #348]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	4b55      	ldr	r3, [pc, #340]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a54      	ldr	r2, [pc, #336]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d6a:	f023 0304 	bic.w	r3, r3, #4
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe fc8a 	bl	8001690 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7fe fc86 	bl	8001690 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0cb      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d96:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0ee      	beq.n	8002d80 <HAL_RCC_OscConfig+0x334>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fe fc74 	bl	8001690 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dac:	f7fe fc70 	bl	8001690 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0b5      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1ee      	bne.n	8002dac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd4:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	4a38      	ldr	r2, [pc, #224]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80a1 	beq.w	8002f2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dea:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d05c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d141      	bne.n	8002e82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <HAL_RCC_OscConfig+0x478>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe fc44 	bl	8001690 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fc40 	bl	8001690 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e087      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	3b01      	subs	r3, #1
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	491b      	ldr	r1, [pc, #108]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCC_OscConfig+0x478>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fc19 	bl	8001690 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe fc15 	bl	8001690 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e05c      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x416>
 8002e80:	e054      	b.n	8002f2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCC_OscConfig+0x478>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fc02 	bl	8001690 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fbfe 	bl	8001690 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e045      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x444>
 8002eae:	e03d      	b.n	8002f2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e038      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40007000 	.word	0x40007000
 8002ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x4ec>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d028      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d121      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d11a      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d111      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0cc      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b68      	ldr	r3, [pc, #416]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d90c      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b8      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b59      	ldr	r3, [pc, #356]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a52      	ldr	r2, [pc, #328]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	494d      	ldr	r1, [pc, #308]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d044      	beq.n	800305c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d119      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d003      	beq.n	8002ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e067      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4934      	ldr	r1, [pc, #208]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302c:	f7fe fb30 	bl	8001690 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7fe fb2c 	bl	8001690 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e04f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 020c 	and.w	r2, r3, #12
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	429a      	cmp	r2, r3
 800305a:	d1eb      	bne.n	8003034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d20c      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e032      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4916      	ldr	r1, [pc, #88]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c2:	f000 f821 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490a      	ldr	r1, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fa90 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023c00 	.word	0x40023c00
 80030f8:	40023800 	.word	0x40023800
 80030fc:	08004f18 	.word	0x08004f18
 8003100:	20000000 	.word	0x20000000
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b094      	sub	sp, #80	; 0x50
 800310e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	647b      	str	r3, [r7, #68]	; 0x44
 8003114:	2300      	movs	r3, #0
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003118:	2300      	movs	r3, #0
 800311a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003120:	4b79      	ldr	r3, [pc, #484]	; (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d00d      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x40>
 800312c:	2b08      	cmp	r3, #8
 800312e:	f200 80e1 	bhi.w	80032f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x34>
 8003136:	2b04      	cmp	r3, #4
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x3a>
 800313a:	e0db      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b73      	ldr	r3, [pc, #460]	; (800330c <HAL_RCC_GetSysClockFreq+0x204>)
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003140:	e0db      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003142:	4b73      	ldr	r3, [pc, #460]	; (8003310 <HAL_RCC_GetSysClockFreq+0x208>)
 8003144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003146:	e0d8      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003148:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003150:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003152:	4b6d      	ldr	r3, [pc, #436]	; (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315e:	4b6a      	ldr	r3, [pc, #424]	; (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	099b      	lsrs	r3, r3, #6
 8003164:	2200      	movs	r2, #0
 8003166:	63bb      	str	r3, [r7, #56]	; 0x38
 8003168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
 8003172:	2300      	movs	r3, #0
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
 8003176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	f04f 0000 	mov.w	r0, #0
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	0159      	lsls	r1, r3, #5
 8003188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800318c:	0150      	lsls	r0, r2, #5
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4621      	mov	r1, r4
 8003194:	1a51      	subs	r1, r2, r1
 8003196:	6139      	str	r1, [r7, #16]
 8003198:	4629      	mov	r1, r5
 800319a:	eb63 0301 	sbc.w	r3, r3, r1
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031ac:	4659      	mov	r1, fp
 80031ae:	018b      	lsls	r3, r1, #6
 80031b0:	4651      	mov	r1, sl
 80031b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031b6:	4651      	mov	r1, sl
 80031b8:	018a      	lsls	r2, r1, #6
 80031ba:	4651      	mov	r1, sl
 80031bc:	ebb2 0801 	subs.w	r8, r2, r1
 80031c0:	4659      	mov	r1, fp
 80031c2:	eb63 0901 	sbc.w	r9, r3, r1
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031da:	4690      	mov	r8, r2
 80031dc:	4699      	mov	r9, r3
 80031de:	4623      	mov	r3, r4
 80031e0:	eb18 0303 	adds.w	r3, r8, r3
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	462b      	mov	r3, r5
 80031e8:	eb49 0303 	adc.w	r3, r9, r3
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031fa:	4629      	mov	r1, r5
 80031fc:	024b      	lsls	r3, r1, #9
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003204:	4621      	mov	r1, r4
 8003206:	024a      	lsls	r2, r1, #9
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320e:	2200      	movs	r2, #0
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
 8003212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003218:	f7fd f832 	bl	8000280 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003224:	e058      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003226:	4b38      	ldr	r3, [pc, #224]	; (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	099b      	lsrs	r3, r3, #6
 800322c:	2200      	movs	r2, #0
 800322e:	4618      	mov	r0, r3
 8003230:	4611      	mov	r1, r2
 8003232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003236:	623b      	str	r3, [r7, #32]
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003240:	4642      	mov	r2, r8
 8003242:	464b      	mov	r3, r9
 8003244:	f04f 0000 	mov.w	r0, #0
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	0159      	lsls	r1, r3, #5
 800324e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003252:	0150      	lsls	r0, r2, #5
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4641      	mov	r1, r8
 800325a:	ebb2 0a01 	subs.w	sl, r2, r1
 800325e:	4649      	mov	r1, r9
 8003260:	eb63 0b01 	sbc.w	fp, r3, r1
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003278:	ebb2 040a 	subs.w	r4, r2, sl
 800327c:	eb63 050b 	sbc.w	r5, r3, fp
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	00eb      	lsls	r3, r5, #3
 800328a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328e:	00e2      	lsls	r2, r4, #3
 8003290:	4614      	mov	r4, r2
 8003292:	461d      	mov	r5, r3
 8003294:	4643      	mov	r3, r8
 8003296:	18e3      	adds	r3, r4, r3
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	464b      	mov	r3, r9
 800329c:	eb45 0303 	adc.w	r3, r5, r3
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ae:	4629      	mov	r1, r5
 80032b0:	028b      	lsls	r3, r1, #10
 80032b2:	4621      	mov	r1, r4
 80032b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032b8:	4621      	mov	r1, r4
 80032ba:	028a      	lsls	r2, r1, #10
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c2:	2200      	movs	r2, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	61fa      	str	r2, [r7, #28]
 80032c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032cc:	f7fc ffd8 	bl	8000280 <__aeabi_uldivmod>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4613      	mov	r3, r2
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	3301      	adds	r3, #1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetSysClockFreq+0x204>)
 80032f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3750      	adds	r7, #80	; 0x50
 8003300:	46bd      	mov	sp, r7
 8003302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	00f42400 	.word	0x00f42400
 8003310:	007a1200 	.word	0x007a1200

08003314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <HAL_RCC_GetHCLKFreq+0x14>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000000 	.word	0x20000000

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003330:	f7ff fff0 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	0a9b      	lsrs	r3, r3, #10
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800
 8003350:	08004f28 	.word	0x08004f28

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003358:	f7ff ffdc 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	0b5b      	lsrs	r3, r3, #13
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40023800 	.word	0x40023800
 8003378:	08004f28 	.word	0x08004f28

0800337c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e03f      	b.n	800340e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd ffb0 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fddf 	bl	8003f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b08a      	sub	sp, #40	; 0x28
 800341a:	af02      	add	r7, sp, #8
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	4613      	mov	r3, r2
 8003424:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	d17c      	bne.n	8003530 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_UART_Transmit+0x2c>
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e075      	b.n	8003532 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_UART_Transmit+0x3e>
 8003450:	2302      	movs	r3, #2
 8003452:	e06e      	b.n	8003532 <HAL_UART_Transmit+0x11c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2221      	movs	r2, #33	; 0x21
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800346a:	f7fe f911 	bl	8001690 <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	88fa      	ldrh	r2, [r7, #6]
 800347a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003484:	d108      	bne.n	8003498 <HAL_UART_Transmit+0x82>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d104      	bne.n	8003498 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	e003      	b.n	80034a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034a8:	e02a      	b.n	8003500 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fb1f 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e036      	b.n	8003532 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3302      	adds	r3, #2
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e007      	b.n	80034f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1cf      	bne.n	80034aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 faef 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e006      	b.n	8003532 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	4613      	mov	r3, r2
 8003546:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b20      	cmp	r3, #32
 8003552:	d11d      	bne.n	8003590 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_UART_Receive_IT+0x26>
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e016      	b.n	8003592 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_UART_Receive_IT+0x38>
 800356e:	2302      	movs	r3, #2
 8003570:	e00f      	b.n	8003592 <HAL_UART_Receive_IT+0x58>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	461a      	mov	r2, r3
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fb24 	bl	8003bd4 <UART_Start_Receive_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	e000      	b.n	8003592 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b0ba      	sub	sp, #232	; 0xe8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_UART_IRQHandler+0x66>
 80035ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fc07 	bl	8003e0e <UART_Receive_IT>
      return;
 8003600:	e256      	b.n	8003ab0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80de 	beq.w	80037c8 <HAL_UART_IRQHandler+0x22c>
 800360c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800361c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80d1 	beq.w	80037c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_UART_IRQHandler+0xae>
 8003632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_UART_IRQHandler+0xd2>
 8003656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_UART_IRQHandler+0xf6>
 800367a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d011      	beq.n	80036c2 <HAL_UART_IRQHandler+0x126>
 800369e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0208 	orr.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 81ed 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_UART_IRQHandler+0x14e>
 80036d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fb92 	bl	8003e0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_UART_IRQHandler+0x17a>
 800370e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04f      	beq.n	80037b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fa9a 	bl	8003c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d141      	bne.n	80037ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3314      	adds	r3, #20
 8003752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800375a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800376e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1d9      	bne.n	800372a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	2b00      	cmp	r3, #0
 800377c:	d013      	beq.n	80037a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	4a7d      	ldr	r2, [pc, #500]	; (8003978 <HAL_UART_IRQHandler+0x3dc>)
 8003784:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe ff6b 	bl	8002666 <HAL_DMA_Abort_IT>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a0:	4610      	mov	r0, r2
 80037a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e00e      	b.n	80037c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f990 	bl	8003acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e00a      	b.n	80037c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f98c 	bl	8003acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e006      	b.n	80037c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f988 	bl	8003acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037c2:	e170      	b.n	8003aa6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	bf00      	nop
    return;
 80037c6:	e16e      	b.n	8003aa6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	f040 814a 	bne.w	8003a66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8143 	beq.w	8003a66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 813c 	beq.w	8003a66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	f040 80b4 	bne.w	800397c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8140 	beq.w	8003aaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800382e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003832:	429a      	cmp	r2, r3
 8003834:	f080 8139 	bcs.w	8003aaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800383e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384a:	f000 8088 	beq.w	800395e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800386c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800387a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800387e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1d9      	bne.n	800384e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3314      	adds	r3, #20
 80038a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e1      	bne.n	800389a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3314      	adds	r3, #20
 80038dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e3      	bne.n	80038d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800392c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392e:	f023 0310 	bic.w	r3, r3, #16
 8003932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003940:	65ba      	str	r2, [r7, #88]	; 0x58
 8003942:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800394e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e3      	bne.n	800391c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fe14 	bl	8002586 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003966:	b29b      	uxth	r3, r3
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8b6 	bl	8003ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003974:	e099      	b.n	8003aaa <HAL_UART_IRQHandler+0x50e>
 8003976:	bf00      	nop
 8003978:	08003d17 	.word	0x08003d17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003984:	b29b      	uxth	r3, r3
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 808b 	beq.w	8003aae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8086 	beq.w	8003aae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	330c      	adds	r3, #12
 80039c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039c6:	647a      	str	r2, [r7, #68]	; 0x44
 80039c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e3      	bne.n	80039a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3314      	adds	r3, #20
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	623b      	str	r3, [r7, #32]
   return(result);
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3314      	adds	r3, #20
 80039fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039fe:	633a      	str	r2, [r7, #48]	; 0x30
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e3      	bne.n	80039da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0310 	bic.w	r3, r3, #16
 8003a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	330c      	adds	r3, #12
 8003a40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a44:	61fa      	str	r2, [r7, #28]
 8003a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	69b9      	ldr	r1, [r7, #24]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	617b      	str	r3, [r7, #20]
   return(result);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e3      	bne.n	8003a20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f83e 	bl	8003ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a64:	e023      	b.n	8003aae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_UART_IRQHandler+0x4ea>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f95d 	bl	8003d3e <UART_Transmit_IT>
    return;
 8003a84:	e014      	b.n	8003ab0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x514>
 8003a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f99d 	bl	8003dde <UART_EndTransmit_IT>
    return;
 8003aa4:	e004      	b.n	8003ab0 <HAL_UART_IRQHandler+0x514>
    return;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <HAL_UART_IRQHandler+0x514>
      return;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_UART_IRQHandler+0x514>
      return;
 8003aae:	bf00      	nop
  }
}
 8003ab0:	37e8      	adds	r7, #232	; 0xe8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop

08003ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b090      	sub	sp, #64	; 0x40
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b08:	e050      	b.n	8003bac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d04c      	beq.n	8003bac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b18:	f7fd fdba 	bl	8001690 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d241      	bcs.n	8003bac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b48:	637a      	str	r2, [r7, #52]	; 0x34
 8003b4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3314      	adds	r3, #20
 8003b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b7c:	623a      	str	r2, [r7, #32]
 8003b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	69f9      	ldr	r1, [r7, #28]
 8003b82:	6a3a      	ldr	r2, [r7, #32]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e5      	bne.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e00f      	b.n	8003bcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d09f      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3740      	adds	r7, #64	; 0x40
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2222      	movs	r2, #34	; 0x22
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0220 	orr.w	r2, r2, #32
 8003c40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b095      	sub	sp, #84	; 0x54
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c78:	643a      	str	r2, [r7, #64]	; 0x40
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e5      	bne.n	8003c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e5      	bne.n	8003c8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d119      	bne.n	8003cfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ce8:	61ba      	str	r2, [r7, #24]
 8003cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e5      	bne.n	8003cc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d0a:	bf00      	nop
 8003d0c:	3754      	adds	r7, #84	; 0x54
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff fecb 	bl	8003acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b21      	cmp	r3, #33	; 0x21
 8003d50:	d13e      	bne.n	8003dd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5a:	d114      	bne.n	8003d86 <UART_Transmit_IT+0x48>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d110      	bne.n	8003d86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	1c9a      	adds	r2, r3, #2
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]
 8003d84:	e008      	b.n	8003d98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	1c59      	adds	r1, r3, #1
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6211      	str	r1, [r2, #32]
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4619      	mov	r1, r3
 8003da6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10f      	bne.n	8003dcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fe5a 	bl	8003ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b08c      	sub	sp, #48	; 0x30
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b22      	cmp	r3, #34	; 0x22
 8003e20:	f040 80ab 	bne.w	8003f7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	d117      	bne.n	8003e5e <UART_Receive_IT+0x50>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d113      	bne.n	8003e5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	1c9a      	adds	r2, r3, #2
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e5c:	e026      	b.n	8003eac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e70:	d007      	beq.n	8003e82 <UART_Receive_IT+0x74>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <UART_Receive_IT+0x82>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e008      	b.n	8003ea2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d15a      	bne.n	8003f76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0220 	bic.w	r2, r2, #32
 8003ece:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d135      	bne.n	8003f6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	613b      	str	r3, [r7, #16]
   return(result);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f023 0310 	bic.w	r3, r3, #16
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	330c      	adds	r3, #12
 8003f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f26:	623a      	str	r2, [r7, #32]
 8003f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	69f9      	ldr	r1, [r7, #28]
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e5      	bne.n	8003f06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d10a      	bne.n	8003f5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f62:	4619      	mov	r1, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fdbb 	bl	8003ae0 <HAL_UARTEx_RxEventCallback>
 8003f6a:	e002      	b.n	8003f72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7fd f8d7 	bl	8001120 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e002      	b.n	8003f7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3730      	adds	r7, #48	; 0x30
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b0c0      	sub	sp, #256	; 0x100
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	68d9      	ldr	r1, [r3, #12]
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	ea40 0301 	orr.w	r3, r0, r1
 8003fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fdc:	f021 010c 	bic.w	r1, r1, #12
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fea:	430b      	orrs	r3, r1
 8003fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	6999      	ldr	r1, [r3, #24]
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	ea40 0301 	orr.w	r3, r0, r1
 800400a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b8f      	ldr	r3, [pc, #572]	; (8004250 <UART_SetConfig+0x2cc>)
 8004014:	429a      	cmp	r2, r3
 8004016:	d005      	beq.n	8004024 <UART_SetConfig+0xa0>
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b8d      	ldr	r3, [pc, #564]	; (8004254 <UART_SetConfig+0x2d0>)
 8004020:	429a      	cmp	r2, r3
 8004022:	d104      	bne.n	800402e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7ff f996 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8004028:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800402c:	e003      	b.n	8004036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7ff f97d 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8004032:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	f040 810c 	bne.w	800425c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800404e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004056:	4622      	mov	r2, r4
 8004058:	462b      	mov	r3, r5
 800405a:	1891      	adds	r1, r2, r2
 800405c:	65b9      	str	r1, [r7, #88]	; 0x58
 800405e:	415b      	adcs	r3, r3
 8004060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004066:	4621      	mov	r1, r4
 8004068:	eb12 0801 	adds.w	r8, r2, r1
 800406c:	4629      	mov	r1, r5
 800406e:	eb43 0901 	adc.w	r9, r3, r1
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004086:	4690      	mov	r8, r2
 8004088:	4699      	mov	r9, r3
 800408a:	4623      	mov	r3, r4
 800408c:	eb18 0303 	adds.w	r3, r8, r3
 8004090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004094:	462b      	mov	r3, r5
 8004096:	eb49 0303 	adc.w	r3, r9, r3
 800409a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040b2:	460b      	mov	r3, r1
 80040b4:	18db      	adds	r3, r3, r3
 80040b6:	653b      	str	r3, [r7, #80]	; 0x50
 80040b8:	4613      	mov	r3, r2
 80040ba:	eb42 0303 	adc.w	r3, r2, r3
 80040be:	657b      	str	r3, [r7, #84]	; 0x54
 80040c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040c8:	f7fc f8da 	bl	8000280 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <UART_SetConfig+0x2d4>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011c      	lsls	r4, r3, #4
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80040f4:	415b      	adcs	r3, r3
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040fc:	4641      	mov	r1, r8
 80040fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004102:	4649      	mov	r1, r9
 8004104:	eb43 0b01 	adc.w	fp, r3, r1
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800411c:	4692      	mov	sl, r2
 800411e:	469b      	mov	fp, r3
 8004120:	4643      	mov	r3, r8
 8004122:	eb1a 0303 	adds.w	r3, sl, r3
 8004126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800412a:	464b      	mov	r3, r9
 800412c:	eb4b 0303 	adc.w	r3, fp, r3
 8004130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004140:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004148:	460b      	mov	r3, r1
 800414a:	18db      	adds	r3, r3, r3
 800414c:	643b      	str	r3, [r7, #64]	; 0x40
 800414e:	4613      	mov	r3, r2
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
 8004156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800415a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800415e:	f7fc f88f 	bl	8000280 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4611      	mov	r1, r2
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <UART_SetConfig+0x2d4>)
 800416a:	fba3 2301 	umull	r2, r3, r3, r1
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2264      	movs	r2, #100	; 0x64
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	1acb      	subs	r3, r1, r3
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800417e:	4b36      	ldr	r3, [pc, #216]	; (8004258 <UART_SetConfig+0x2d4>)
 8004180:	fba3 2302 	umull	r2, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800418c:	441c      	add	r4, r3
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004198:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800419c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041a8:	415b      	adcs	r3, r3
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041b0:	4641      	mov	r1, r8
 80041b2:	1851      	adds	r1, r2, r1
 80041b4:	6339      	str	r1, [r7, #48]	; 0x30
 80041b6:	4649      	mov	r1, r9
 80041b8:	414b      	adcs	r3, r1
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041c8:	4659      	mov	r1, fp
 80041ca:	00cb      	lsls	r3, r1, #3
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d2:	4651      	mov	r1, sl
 80041d4:	00ca      	lsls	r2, r1, #3
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	4642      	mov	r2, r8
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041e4:	464b      	mov	r3, r9
 80041e6:	460a      	mov	r2, r1
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004204:	460b      	mov	r3, r1
 8004206:	18db      	adds	r3, r3, r3
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 800420a:	4613      	mov	r3, r2
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800421a:	f7fc f831 	bl	8000280 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <UART_SetConfig+0x2d4>)
 8004224:	fba3 1302 	umull	r1, r3, r3, r2
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	2164      	movs	r1, #100	; 0x64
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	3332      	adds	r3, #50	; 0x32
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <UART_SetConfig+0x2d4>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 0207 	and.w	r2, r3, #7
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4422      	add	r2, r4
 800424a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800424c:	e106      	b.n	800445c <UART_SetConfig+0x4d8>
 800424e:	bf00      	nop
 8004250:	40011000 	.word	0x40011000
 8004254:	40011400 	.word	0x40011400
 8004258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004266:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800426a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800426e:	4642      	mov	r2, r8
 8004270:	464b      	mov	r3, r9
 8004272:	1891      	adds	r1, r2, r2
 8004274:	6239      	str	r1, [r7, #32]
 8004276:	415b      	adcs	r3, r3
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427e:	4641      	mov	r1, r8
 8004280:	1854      	adds	r4, r2, r1
 8004282:	4649      	mov	r1, r9
 8004284:	eb43 0501 	adc.w	r5, r3, r1
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	00eb      	lsls	r3, r5, #3
 8004292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004296:	00e2      	lsls	r2, r4, #3
 8004298:	4614      	mov	r4, r2
 800429a:	461d      	mov	r5, r3
 800429c:	4643      	mov	r3, r8
 800429e:	18e3      	adds	r3, r4, r3
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042a4:	464b      	mov	r3, r9
 80042a6:	eb45 0303 	adc.w	r3, r5, r3
 80042aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ca:	4629      	mov	r1, r5
 80042cc:	008b      	lsls	r3, r1, #2
 80042ce:	4621      	mov	r1, r4
 80042d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d4:	4621      	mov	r1, r4
 80042d6:	008a      	lsls	r2, r1, #2
 80042d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042dc:	f7fb ffd0 	bl	8000280 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b60      	ldr	r3, [pc, #384]	; (8004468 <UART_SetConfig+0x4e4>)
 80042e6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	011c      	lsls	r4, r3, #4
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	61b9      	str	r1, [r7, #24]
 8004308:	415b      	adcs	r3, r3
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6139      	str	r1, [r7, #16]
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004344:	464b      	mov	r3, r9
 8004346:	460a      	mov	r2, r1
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	67bb      	str	r3, [r7, #120]	; 0x78
 800435a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004368:	4649      	mov	r1, r9
 800436a:	008b      	lsls	r3, r1, #2
 800436c:	4641      	mov	r1, r8
 800436e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004372:	4641      	mov	r1, r8
 8004374:	008a      	lsls	r2, r1, #2
 8004376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800437a:	f7fb ff81 	bl	8000280 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4611      	mov	r1, r2
 8004384:	4b38      	ldr	r3, [pc, #224]	; (8004468 <UART_SetConfig+0x4e4>)
 8004386:	fba3 2301 	umull	r2, r3, r3, r1
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2264      	movs	r2, #100	; 0x64
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	1acb      	subs	r3, r1, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	; 0x32
 8004398:	4a33      	ldr	r2, [pc, #204]	; (8004468 <UART_SetConfig+0x4e4>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a4:	441c      	add	r4, r3
 80043a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043aa:	2200      	movs	r2, #0
 80043ac:	673b      	str	r3, [r7, #112]	; 0x70
 80043ae:	677a      	str	r2, [r7, #116]	; 0x74
 80043b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	415b      	adcs	r3, r3
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f6:	464b      	mov	r3, r9
 80043f8:	460a      	mov	r2, r1
 80043fa:	eb42 0303 	adc.w	r3, r2, r3
 80043fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	663b      	str	r3, [r7, #96]	; 0x60
 800440a:	667a      	str	r2, [r7, #100]	; 0x64
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004418:	4649      	mov	r1, r9
 800441a:	008b      	lsls	r3, r1, #2
 800441c:	4641      	mov	r1, r8
 800441e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004422:	4641      	mov	r1, r8
 8004424:	008a      	lsls	r2, r1, #2
 8004426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800442a:	f7fb ff29 	bl	8000280 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <UART_SetConfig+0x4e4>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2164      	movs	r1, #100	; 0x64
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	3332      	adds	r3, #50	; 0x32
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <UART_SetConfig+0x4e4>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4422      	add	r2, r4
 800445a:	609a      	str	r2, [r3, #8]
}
 800445c:	bf00      	nop
 800445e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004462:	46bd      	mov	sp, r7
 8004464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004468:	51eb851f 	.word	0x51eb851f

0800446c <siprintf>:
 800446c:	b40e      	push	{r1, r2, r3}
 800446e:	b500      	push	{lr}
 8004470:	b09c      	sub	sp, #112	; 0x70
 8004472:	ab1d      	add	r3, sp, #116	; 0x74
 8004474:	9002      	str	r0, [sp, #8]
 8004476:	9006      	str	r0, [sp, #24]
 8004478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800447c:	4809      	ldr	r0, [pc, #36]	; (80044a4 <siprintf+0x38>)
 800447e:	9107      	str	r1, [sp, #28]
 8004480:	9104      	str	r1, [sp, #16]
 8004482:	4909      	ldr	r1, [pc, #36]	; (80044a8 <siprintf+0x3c>)
 8004484:	f853 2b04 	ldr.w	r2, [r3], #4
 8004488:	9105      	str	r1, [sp, #20]
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	a902      	add	r1, sp, #8
 8004490:	f000 f9a2 	bl	80047d8 <_svfiprintf_r>
 8004494:	9b02      	ldr	r3, [sp, #8]
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	b01c      	add	sp, #112	; 0x70
 800449c:	f85d eb04 	ldr.w	lr, [sp], #4
 80044a0:	b003      	add	sp, #12
 80044a2:	4770      	bx	lr
 80044a4:	20000058 	.word	0x20000058
 80044a8:	ffff0208 	.word	0xffff0208

080044ac <memset>:
 80044ac:	4402      	add	r2, r0
 80044ae:	4603      	mov	r3, r0
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d100      	bne.n	80044b6 <memset+0xa>
 80044b4:	4770      	bx	lr
 80044b6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ba:	e7f9      	b.n	80044b0 <memset+0x4>

080044bc <strcat>:
 80044bc:	b510      	push	{r4, lr}
 80044be:	4602      	mov	r2, r0
 80044c0:	7814      	ldrb	r4, [r2, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	3201      	adds	r2, #1
 80044c6:	2c00      	cmp	r4, #0
 80044c8:	d1fa      	bne.n	80044c0 <strcat+0x4>
 80044ca:	3b01      	subs	r3, #1
 80044cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044d4:	2a00      	cmp	r2, #0
 80044d6:	d1f9      	bne.n	80044cc <strcat+0x10>
 80044d8:	bd10      	pop	{r4, pc}
	...

080044dc <__errno>:
 80044dc:	4b01      	ldr	r3, [pc, #4]	; (80044e4 <__errno+0x8>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000058 	.word	0x20000058

080044e8 <__libc_init_array>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4d0d      	ldr	r5, [pc, #52]	; (8004520 <__libc_init_array+0x38>)
 80044ec:	4c0d      	ldr	r4, [pc, #52]	; (8004524 <__libc_init_array+0x3c>)
 80044ee:	1b64      	subs	r4, r4, r5
 80044f0:	10a4      	asrs	r4, r4, #2
 80044f2:	2600      	movs	r6, #0
 80044f4:	42a6      	cmp	r6, r4
 80044f6:	d109      	bne.n	800450c <__libc_init_array+0x24>
 80044f8:	4d0b      	ldr	r5, [pc, #44]	; (8004528 <__libc_init_array+0x40>)
 80044fa:	4c0c      	ldr	r4, [pc, #48]	; (800452c <__libc_init_array+0x44>)
 80044fc:	f000 fc6a 	bl	8004dd4 <_init>
 8004500:	1b64      	subs	r4, r4, r5
 8004502:	10a4      	asrs	r4, r4, #2
 8004504:	2600      	movs	r6, #0
 8004506:	42a6      	cmp	r6, r4
 8004508:	d105      	bne.n	8004516 <__libc_init_array+0x2e>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004510:	4798      	blx	r3
 8004512:	3601      	adds	r6, #1
 8004514:	e7ee      	b.n	80044f4 <__libc_init_array+0xc>
 8004516:	f855 3b04 	ldr.w	r3, [r5], #4
 800451a:	4798      	blx	r3
 800451c:	3601      	adds	r6, #1
 800451e:	e7f2      	b.n	8004506 <__libc_init_array+0x1e>
 8004520:	08004f6c 	.word	0x08004f6c
 8004524:	08004f6c 	.word	0x08004f6c
 8004528:	08004f6c 	.word	0x08004f6c
 800452c:	08004f70 	.word	0x08004f70

08004530 <__retarget_lock_acquire_recursive>:
 8004530:	4770      	bx	lr

08004532 <__retarget_lock_release_recursive>:
 8004532:	4770      	bx	lr

08004534 <_free_r>:
 8004534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004536:	2900      	cmp	r1, #0
 8004538:	d044      	beq.n	80045c4 <_free_r+0x90>
 800453a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453e:	9001      	str	r0, [sp, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f1a1 0404 	sub.w	r4, r1, #4
 8004546:	bfb8      	it	lt
 8004548:	18e4      	addlt	r4, r4, r3
 800454a:	f000 f8df 	bl	800470c <__malloc_lock>
 800454e:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <_free_r+0x94>)
 8004550:	9801      	ldr	r0, [sp, #4]
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	b933      	cbnz	r3, 8004564 <_free_r+0x30>
 8004556:	6063      	str	r3, [r4, #4]
 8004558:	6014      	str	r4, [r2, #0]
 800455a:	b003      	add	sp, #12
 800455c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004560:	f000 b8da 	b.w	8004718 <__malloc_unlock>
 8004564:	42a3      	cmp	r3, r4
 8004566:	d908      	bls.n	800457a <_free_r+0x46>
 8004568:	6825      	ldr	r5, [r4, #0]
 800456a:	1961      	adds	r1, r4, r5
 800456c:	428b      	cmp	r3, r1
 800456e:	bf01      	itttt	eq
 8004570:	6819      	ldreq	r1, [r3, #0]
 8004572:	685b      	ldreq	r3, [r3, #4]
 8004574:	1949      	addeq	r1, r1, r5
 8004576:	6021      	streq	r1, [r4, #0]
 8004578:	e7ed      	b.n	8004556 <_free_r+0x22>
 800457a:	461a      	mov	r2, r3
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	b10b      	cbz	r3, 8004584 <_free_r+0x50>
 8004580:	42a3      	cmp	r3, r4
 8004582:	d9fa      	bls.n	800457a <_free_r+0x46>
 8004584:	6811      	ldr	r1, [r2, #0]
 8004586:	1855      	adds	r5, r2, r1
 8004588:	42a5      	cmp	r5, r4
 800458a:	d10b      	bne.n	80045a4 <_free_r+0x70>
 800458c:	6824      	ldr	r4, [r4, #0]
 800458e:	4421      	add	r1, r4
 8004590:	1854      	adds	r4, r2, r1
 8004592:	42a3      	cmp	r3, r4
 8004594:	6011      	str	r1, [r2, #0]
 8004596:	d1e0      	bne.n	800455a <_free_r+0x26>
 8004598:	681c      	ldr	r4, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	6053      	str	r3, [r2, #4]
 800459e:	440c      	add	r4, r1
 80045a0:	6014      	str	r4, [r2, #0]
 80045a2:	e7da      	b.n	800455a <_free_r+0x26>
 80045a4:	d902      	bls.n	80045ac <_free_r+0x78>
 80045a6:	230c      	movs	r3, #12
 80045a8:	6003      	str	r3, [r0, #0]
 80045aa:	e7d6      	b.n	800455a <_free_r+0x26>
 80045ac:	6825      	ldr	r5, [r4, #0]
 80045ae:	1961      	adds	r1, r4, r5
 80045b0:	428b      	cmp	r3, r1
 80045b2:	bf04      	itt	eq
 80045b4:	6819      	ldreq	r1, [r3, #0]
 80045b6:	685b      	ldreq	r3, [r3, #4]
 80045b8:	6063      	str	r3, [r4, #4]
 80045ba:	bf04      	itt	eq
 80045bc:	1949      	addeq	r1, r1, r5
 80045be:	6021      	streq	r1, [r4, #0]
 80045c0:	6054      	str	r4, [r2, #4]
 80045c2:	e7ca      	b.n	800455a <_free_r+0x26>
 80045c4:	b003      	add	sp, #12
 80045c6:	bd30      	pop	{r4, r5, pc}
 80045c8:	2000034c 	.word	0x2000034c

080045cc <sbrk_aligned>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4e0e      	ldr	r6, [pc, #56]	; (8004608 <sbrk_aligned+0x3c>)
 80045d0:	460c      	mov	r4, r1
 80045d2:	6831      	ldr	r1, [r6, #0]
 80045d4:	4605      	mov	r5, r0
 80045d6:	b911      	cbnz	r1, 80045de <sbrk_aligned+0x12>
 80045d8:	f000 fba6 	bl	8004d28 <_sbrk_r>
 80045dc:	6030      	str	r0, [r6, #0]
 80045de:	4621      	mov	r1, r4
 80045e0:	4628      	mov	r0, r5
 80045e2:	f000 fba1 	bl	8004d28 <_sbrk_r>
 80045e6:	1c43      	adds	r3, r0, #1
 80045e8:	d00a      	beq.n	8004600 <sbrk_aligned+0x34>
 80045ea:	1cc4      	adds	r4, r0, #3
 80045ec:	f024 0403 	bic.w	r4, r4, #3
 80045f0:	42a0      	cmp	r0, r4
 80045f2:	d007      	beq.n	8004604 <sbrk_aligned+0x38>
 80045f4:	1a21      	subs	r1, r4, r0
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 fb96 	bl	8004d28 <_sbrk_r>
 80045fc:	3001      	adds	r0, #1
 80045fe:	d101      	bne.n	8004604 <sbrk_aligned+0x38>
 8004600:	f04f 34ff 	mov.w	r4, #4294967295
 8004604:	4620      	mov	r0, r4
 8004606:	bd70      	pop	{r4, r5, r6, pc}
 8004608:	20000350 	.word	0x20000350

0800460c <_malloc_r>:
 800460c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004610:	1ccd      	adds	r5, r1, #3
 8004612:	f025 0503 	bic.w	r5, r5, #3
 8004616:	3508      	adds	r5, #8
 8004618:	2d0c      	cmp	r5, #12
 800461a:	bf38      	it	cc
 800461c:	250c      	movcc	r5, #12
 800461e:	2d00      	cmp	r5, #0
 8004620:	4607      	mov	r7, r0
 8004622:	db01      	blt.n	8004628 <_malloc_r+0x1c>
 8004624:	42a9      	cmp	r1, r5
 8004626:	d905      	bls.n	8004634 <_malloc_r+0x28>
 8004628:	230c      	movs	r3, #12
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	2600      	movs	r6, #0
 800462e:	4630      	mov	r0, r6
 8004630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004634:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004708 <_malloc_r+0xfc>
 8004638:	f000 f868 	bl	800470c <__malloc_lock>
 800463c:	f8d8 3000 	ldr.w	r3, [r8]
 8004640:	461c      	mov	r4, r3
 8004642:	bb5c      	cbnz	r4, 800469c <_malloc_r+0x90>
 8004644:	4629      	mov	r1, r5
 8004646:	4638      	mov	r0, r7
 8004648:	f7ff ffc0 	bl	80045cc <sbrk_aligned>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	4604      	mov	r4, r0
 8004650:	d155      	bne.n	80046fe <_malloc_r+0xf2>
 8004652:	f8d8 4000 	ldr.w	r4, [r8]
 8004656:	4626      	mov	r6, r4
 8004658:	2e00      	cmp	r6, #0
 800465a:	d145      	bne.n	80046e8 <_malloc_r+0xdc>
 800465c:	2c00      	cmp	r4, #0
 800465e:	d048      	beq.n	80046f2 <_malloc_r+0xe6>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	4631      	mov	r1, r6
 8004664:	4638      	mov	r0, r7
 8004666:	eb04 0903 	add.w	r9, r4, r3
 800466a:	f000 fb5d 	bl	8004d28 <_sbrk_r>
 800466e:	4581      	cmp	r9, r0
 8004670:	d13f      	bne.n	80046f2 <_malloc_r+0xe6>
 8004672:	6821      	ldr	r1, [r4, #0]
 8004674:	1a6d      	subs	r5, r5, r1
 8004676:	4629      	mov	r1, r5
 8004678:	4638      	mov	r0, r7
 800467a:	f7ff ffa7 	bl	80045cc <sbrk_aligned>
 800467e:	3001      	adds	r0, #1
 8004680:	d037      	beq.n	80046f2 <_malloc_r+0xe6>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	442b      	add	r3, r5
 8004686:	6023      	str	r3, [r4, #0]
 8004688:	f8d8 3000 	ldr.w	r3, [r8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d038      	beq.n	8004702 <_malloc_r+0xf6>
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	42a2      	cmp	r2, r4
 8004694:	d12b      	bne.n	80046ee <_malloc_r+0xe2>
 8004696:	2200      	movs	r2, #0
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	e00f      	b.n	80046bc <_malloc_r+0xb0>
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	1b52      	subs	r2, r2, r5
 80046a0:	d41f      	bmi.n	80046e2 <_malloc_r+0xd6>
 80046a2:	2a0b      	cmp	r2, #11
 80046a4:	d917      	bls.n	80046d6 <_malloc_r+0xca>
 80046a6:	1961      	adds	r1, r4, r5
 80046a8:	42a3      	cmp	r3, r4
 80046aa:	6025      	str	r5, [r4, #0]
 80046ac:	bf18      	it	ne
 80046ae:	6059      	strne	r1, [r3, #4]
 80046b0:	6863      	ldr	r3, [r4, #4]
 80046b2:	bf08      	it	eq
 80046b4:	f8c8 1000 	streq.w	r1, [r8]
 80046b8:	5162      	str	r2, [r4, r5]
 80046ba:	604b      	str	r3, [r1, #4]
 80046bc:	4638      	mov	r0, r7
 80046be:	f104 060b 	add.w	r6, r4, #11
 80046c2:	f000 f829 	bl	8004718 <__malloc_unlock>
 80046c6:	f026 0607 	bic.w	r6, r6, #7
 80046ca:	1d23      	adds	r3, r4, #4
 80046cc:	1af2      	subs	r2, r6, r3
 80046ce:	d0ae      	beq.n	800462e <_malloc_r+0x22>
 80046d0:	1b9b      	subs	r3, r3, r6
 80046d2:	50a3      	str	r3, [r4, r2]
 80046d4:	e7ab      	b.n	800462e <_malloc_r+0x22>
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	6862      	ldr	r2, [r4, #4]
 80046da:	d1dd      	bne.n	8004698 <_malloc_r+0x8c>
 80046dc:	f8c8 2000 	str.w	r2, [r8]
 80046e0:	e7ec      	b.n	80046bc <_malloc_r+0xb0>
 80046e2:	4623      	mov	r3, r4
 80046e4:	6864      	ldr	r4, [r4, #4]
 80046e6:	e7ac      	b.n	8004642 <_malloc_r+0x36>
 80046e8:	4634      	mov	r4, r6
 80046ea:	6876      	ldr	r6, [r6, #4]
 80046ec:	e7b4      	b.n	8004658 <_malloc_r+0x4c>
 80046ee:	4613      	mov	r3, r2
 80046f0:	e7cc      	b.n	800468c <_malloc_r+0x80>
 80046f2:	230c      	movs	r3, #12
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	4638      	mov	r0, r7
 80046f8:	f000 f80e 	bl	8004718 <__malloc_unlock>
 80046fc:	e797      	b.n	800462e <_malloc_r+0x22>
 80046fe:	6025      	str	r5, [r4, #0]
 8004700:	e7dc      	b.n	80046bc <_malloc_r+0xb0>
 8004702:	605b      	str	r3, [r3, #4]
 8004704:	deff      	udf	#255	; 0xff
 8004706:	bf00      	nop
 8004708:	2000034c 	.word	0x2000034c

0800470c <__malloc_lock>:
 800470c:	4801      	ldr	r0, [pc, #4]	; (8004714 <__malloc_lock+0x8>)
 800470e:	f7ff bf0f 	b.w	8004530 <__retarget_lock_acquire_recursive>
 8004712:	bf00      	nop
 8004714:	20000348 	.word	0x20000348

08004718 <__malloc_unlock>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <__malloc_unlock+0x8>)
 800471a:	f7ff bf0a 	b.w	8004532 <__retarget_lock_release_recursive>
 800471e:	bf00      	nop
 8004720:	20000348 	.word	0x20000348

08004724 <__ssputs_r>:
 8004724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004728:	688e      	ldr	r6, [r1, #8]
 800472a:	461f      	mov	r7, r3
 800472c:	42be      	cmp	r6, r7
 800472e:	680b      	ldr	r3, [r1, #0]
 8004730:	4682      	mov	sl, r0
 8004732:	460c      	mov	r4, r1
 8004734:	4690      	mov	r8, r2
 8004736:	d82c      	bhi.n	8004792 <__ssputs_r+0x6e>
 8004738:	898a      	ldrh	r2, [r1, #12]
 800473a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800473e:	d026      	beq.n	800478e <__ssputs_r+0x6a>
 8004740:	6965      	ldr	r5, [r4, #20]
 8004742:	6909      	ldr	r1, [r1, #16]
 8004744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004748:	eba3 0901 	sub.w	r9, r3, r1
 800474c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004750:	1c7b      	adds	r3, r7, #1
 8004752:	444b      	add	r3, r9
 8004754:	106d      	asrs	r5, r5, #1
 8004756:	429d      	cmp	r5, r3
 8004758:	bf38      	it	cc
 800475a:	461d      	movcc	r5, r3
 800475c:	0553      	lsls	r3, r2, #21
 800475e:	d527      	bpl.n	80047b0 <__ssputs_r+0x8c>
 8004760:	4629      	mov	r1, r5
 8004762:	f7ff ff53 	bl	800460c <_malloc_r>
 8004766:	4606      	mov	r6, r0
 8004768:	b360      	cbz	r0, 80047c4 <__ssputs_r+0xa0>
 800476a:	6921      	ldr	r1, [r4, #16]
 800476c:	464a      	mov	r2, r9
 800476e:	f000 faeb 	bl	8004d48 <memcpy>
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	81a3      	strh	r3, [r4, #12]
 800477e:	6126      	str	r6, [r4, #16]
 8004780:	6165      	str	r5, [r4, #20]
 8004782:	444e      	add	r6, r9
 8004784:	eba5 0509 	sub.w	r5, r5, r9
 8004788:	6026      	str	r6, [r4, #0]
 800478a:	60a5      	str	r5, [r4, #8]
 800478c:	463e      	mov	r6, r7
 800478e:	42be      	cmp	r6, r7
 8004790:	d900      	bls.n	8004794 <__ssputs_r+0x70>
 8004792:	463e      	mov	r6, r7
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	4632      	mov	r2, r6
 8004798:	4641      	mov	r1, r8
 800479a:	f000 faab 	bl	8004cf4 <memmove>
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	1b9b      	subs	r3, r3, r6
 80047a2:	60a3      	str	r3, [r4, #8]
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	4433      	add	r3, r6
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	2000      	movs	r0, #0
 80047ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b0:	462a      	mov	r2, r5
 80047b2:	f000 fad7 	bl	8004d64 <_realloc_r>
 80047b6:	4606      	mov	r6, r0
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d1e0      	bne.n	800477e <__ssputs_r+0x5a>
 80047bc:	6921      	ldr	r1, [r4, #16]
 80047be:	4650      	mov	r0, sl
 80047c0:	f7ff feb8 	bl	8004534 <_free_r>
 80047c4:	230c      	movs	r3, #12
 80047c6:	f8ca 3000 	str.w	r3, [sl]
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	e7e9      	b.n	80047ac <__ssputs_r+0x88>

080047d8 <_svfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	4698      	mov	r8, r3
 80047de:	898b      	ldrh	r3, [r1, #12]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	b09d      	sub	sp, #116	; 0x74
 80047e4:	4607      	mov	r7, r0
 80047e6:	460d      	mov	r5, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	d50e      	bpl.n	800480a <_svfiprintf_r+0x32>
 80047ec:	690b      	ldr	r3, [r1, #16]
 80047ee:	b963      	cbnz	r3, 800480a <_svfiprintf_r+0x32>
 80047f0:	2140      	movs	r1, #64	; 0x40
 80047f2:	f7ff ff0b 	bl	800460c <_malloc_r>
 80047f6:	6028      	str	r0, [r5, #0]
 80047f8:	6128      	str	r0, [r5, #16]
 80047fa:	b920      	cbnz	r0, 8004806 <_svfiprintf_r+0x2e>
 80047fc:	230c      	movs	r3, #12
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	e0d0      	b.n	80049a8 <_svfiprintf_r+0x1d0>
 8004806:	2340      	movs	r3, #64	; 0x40
 8004808:	616b      	str	r3, [r5, #20]
 800480a:	2300      	movs	r3, #0
 800480c:	9309      	str	r3, [sp, #36]	; 0x24
 800480e:	2320      	movs	r3, #32
 8004810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004814:	f8cd 800c 	str.w	r8, [sp, #12]
 8004818:	2330      	movs	r3, #48	; 0x30
 800481a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80049c0 <_svfiprintf_r+0x1e8>
 800481e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004822:	f04f 0901 	mov.w	r9, #1
 8004826:	4623      	mov	r3, r4
 8004828:	469a      	mov	sl, r3
 800482a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800482e:	b10a      	cbz	r2, 8004834 <_svfiprintf_r+0x5c>
 8004830:	2a25      	cmp	r2, #37	; 0x25
 8004832:	d1f9      	bne.n	8004828 <_svfiprintf_r+0x50>
 8004834:	ebba 0b04 	subs.w	fp, sl, r4
 8004838:	d00b      	beq.n	8004852 <_svfiprintf_r+0x7a>
 800483a:	465b      	mov	r3, fp
 800483c:	4622      	mov	r2, r4
 800483e:	4629      	mov	r1, r5
 8004840:	4638      	mov	r0, r7
 8004842:	f7ff ff6f 	bl	8004724 <__ssputs_r>
 8004846:	3001      	adds	r0, #1
 8004848:	f000 80a9 	beq.w	800499e <_svfiprintf_r+0x1c6>
 800484c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800484e:	445a      	add	r2, fp
 8004850:	9209      	str	r2, [sp, #36]	; 0x24
 8004852:	f89a 3000 	ldrb.w	r3, [sl]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80a1 	beq.w	800499e <_svfiprintf_r+0x1c6>
 800485c:	2300      	movs	r3, #0
 800485e:	f04f 32ff 	mov.w	r2, #4294967295
 8004862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004866:	f10a 0a01 	add.w	sl, sl, #1
 800486a:	9304      	str	r3, [sp, #16]
 800486c:	9307      	str	r3, [sp, #28]
 800486e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004872:	931a      	str	r3, [sp, #104]	; 0x68
 8004874:	4654      	mov	r4, sl
 8004876:	2205      	movs	r2, #5
 8004878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487c:	4850      	ldr	r0, [pc, #320]	; (80049c0 <_svfiprintf_r+0x1e8>)
 800487e:	f7fb fcaf 	bl	80001e0 <memchr>
 8004882:	9a04      	ldr	r2, [sp, #16]
 8004884:	b9d8      	cbnz	r0, 80048be <_svfiprintf_r+0xe6>
 8004886:	06d0      	lsls	r0, r2, #27
 8004888:	bf44      	itt	mi
 800488a:	2320      	movmi	r3, #32
 800488c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004890:	0711      	lsls	r1, r2, #28
 8004892:	bf44      	itt	mi
 8004894:	232b      	movmi	r3, #43	; 0x2b
 8004896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800489a:	f89a 3000 	ldrb.w	r3, [sl]
 800489e:	2b2a      	cmp	r3, #42	; 0x2a
 80048a0:	d015      	beq.n	80048ce <_svfiprintf_r+0xf6>
 80048a2:	9a07      	ldr	r2, [sp, #28]
 80048a4:	4654      	mov	r4, sl
 80048a6:	2000      	movs	r0, #0
 80048a8:	f04f 0c0a 	mov.w	ip, #10
 80048ac:	4621      	mov	r1, r4
 80048ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048b2:	3b30      	subs	r3, #48	; 0x30
 80048b4:	2b09      	cmp	r3, #9
 80048b6:	d94d      	bls.n	8004954 <_svfiprintf_r+0x17c>
 80048b8:	b1b0      	cbz	r0, 80048e8 <_svfiprintf_r+0x110>
 80048ba:	9207      	str	r2, [sp, #28]
 80048bc:	e014      	b.n	80048e8 <_svfiprintf_r+0x110>
 80048be:	eba0 0308 	sub.w	r3, r0, r8
 80048c2:	fa09 f303 	lsl.w	r3, r9, r3
 80048c6:	4313      	orrs	r3, r2
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	46a2      	mov	sl, r4
 80048cc:	e7d2      	b.n	8004874 <_svfiprintf_r+0x9c>
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	1d19      	adds	r1, r3, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	9103      	str	r1, [sp, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfbb      	ittet	lt
 80048da:	425b      	neglt	r3, r3
 80048dc:	f042 0202 	orrlt.w	r2, r2, #2
 80048e0:	9307      	strge	r3, [sp, #28]
 80048e2:	9307      	strlt	r3, [sp, #28]
 80048e4:	bfb8      	it	lt
 80048e6:	9204      	strlt	r2, [sp, #16]
 80048e8:	7823      	ldrb	r3, [r4, #0]
 80048ea:	2b2e      	cmp	r3, #46	; 0x2e
 80048ec:	d10c      	bne.n	8004908 <_svfiprintf_r+0x130>
 80048ee:	7863      	ldrb	r3, [r4, #1]
 80048f0:	2b2a      	cmp	r3, #42	; 0x2a
 80048f2:	d134      	bne.n	800495e <_svfiprintf_r+0x186>
 80048f4:	9b03      	ldr	r3, [sp, #12]
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	9203      	str	r2, [sp, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bfb8      	it	lt
 8004900:	f04f 33ff 	movlt.w	r3, #4294967295
 8004904:	3402      	adds	r4, #2
 8004906:	9305      	str	r3, [sp, #20]
 8004908:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80049d0 <_svfiprintf_r+0x1f8>
 800490c:	7821      	ldrb	r1, [r4, #0]
 800490e:	2203      	movs	r2, #3
 8004910:	4650      	mov	r0, sl
 8004912:	f7fb fc65 	bl	80001e0 <memchr>
 8004916:	b138      	cbz	r0, 8004928 <_svfiprintf_r+0x150>
 8004918:	9b04      	ldr	r3, [sp, #16]
 800491a:	eba0 000a 	sub.w	r0, r0, sl
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	4082      	lsls	r2, r0
 8004922:	4313      	orrs	r3, r2
 8004924:	3401      	adds	r4, #1
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492c:	4825      	ldr	r0, [pc, #148]	; (80049c4 <_svfiprintf_r+0x1ec>)
 800492e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004932:	2206      	movs	r2, #6
 8004934:	f7fb fc54 	bl	80001e0 <memchr>
 8004938:	2800      	cmp	r0, #0
 800493a:	d038      	beq.n	80049ae <_svfiprintf_r+0x1d6>
 800493c:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <_svfiprintf_r+0x1f0>)
 800493e:	bb1b      	cbnz	r3, 8004988 <_svfiprintf_r+0x1b0>
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	3307      	adds	r3, #7
 8004944:	f023 0307 	bic.w	r3, r3, #7
 8004948:	3308      	adds	r3, #8
 800494a:	9303      	str	r3, [sp, #12]
 800494c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800494e:	4433      	add	r3, r6
 8004950:	9309      	str	r3, [sp, #36]	; 0x24
 8004952:	e768      	b.n	8004826 <_svfiprintf_r+0x4e>
 8004954:	fb0c 3202 	mla	r2, ip, r2, r3
 8004958:	460c      	mov	r4, r1
 800495a:	2001      	movs	r0, #1
 800495c:	e7a6      	b.n	80048ac <_svfiprintf_r+0xd4>
 800495e:	2300      	movs	r3, #0
 8004960:	3401      	adds	r4, #1
 8004962:	9305      	str	r3, [sp, #20]
 8004964:	4619      	mov	r1, r3
 8004966:	f04f 0c0a 	mov.w	ip, #10
 800496a:	4620      	mov	r0, r4
 800496c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004970:	3a30      	subs	r2, #48	; 0x30
 8004972:	2a09      	cmp	r2, #9
 8004974:	d903      	bls.n	800497e <_svfiprintf_r+0x1a6>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0c6      	beq.n	8004908 <_svfiprintf_r+0x130>
 800497a:	9105      	str	r1, [sp, #20]
 800497c:	e7c4      	b.n	8004908 <_svfiprintf_r+0x130>
 800497e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004982:	4604      	mov	r4, r0
 8004984:	2301      	movs	r3, #1
 8004986:	e7f0      	b.n	800496a <_svfiprintf_r+0x192>
 8004988:	ab03      	add	r3, sp, #12
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	462a      	mov	r2, r5
 800498e:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <_svfiprintf_r+0x1f4>)
 8004990:	a904      	add	r1, sp, #16
 8004992:	4638      	mov	r0, r7
 8004994:	f3af 8000 	nop.w
 8004998:	1c42      	adds	r2, r0, #1
 800499a:	4606      	mov	r6, r0
 800499c:	d1d6      	bne.n	800494c <_svfiprintf_r+0x174>
 800499e:	89ab      	ldrh	r3, [r5, #12]
 80049a0:	065b      	lsls	r3, r3, #25
 80049a2:	f53f af2d 	bmi.w	8004800 <_svfiprintf_r+0x28>
 80049a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049a8:	b01d      	add	sp, #116	; 0x74
 80049aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ae:	ab03      	add	r3, sp, #12
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	462a      	mov	r2, r5
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <_svfiprintf_r+0x1f4>)
 80049b6:	a904      	add	r1, sp, #16
 80049b8:	4638      	mov	r0, r7
 80049ba:	f000 f879 	bl	8004ab0 <_printf_i>
 80049be:	e7eb      	b.n	8004998 <_svfiprintf_r+0x1c0>
 80049c0:	08004f30 	.word	0x08004f30
 80049c4:	08004f3a 	.word	0x08004f3a
 80049c8:	00000000 	.word	0x00000000
 80049cc:	08004725 	.word	0x08004725
 80049d0:	08004f36 	.word	0x08004f36

080049d4 <_printf_common>:
 80049d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	4616      	mov	r6, r2
 80049da:	4699      	mov	r9, r3
 80049dc:	688a      	ldr	r2, [r1, #8]
 80049de:	690b      	ldr	r3, [r1, #16]
 80049e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049e4:	4293      	cmp	r3, r2
 80049e6:	bfb8      	it	lt
 80049e8:	4613      	movlt	r3, r2
 80049ea:	6033      	str	r3, [r6, #0]
 80049ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049f0:	4607      	mov	r7, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	b10a      	cbz	r2, 80049fa <_printf_common+0x26>
 80049f6:	3301      	adds	r3, #1
 80049f8:	6033      	str	r3, [r6, #0]
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	0699      	lsls	r1, r3, #26
 80049fe:	bf42      	ittt	mi
 8004a00:	6833      	ldrmi	r3, [r6, #0]
 8004a02:	3302      	addmi	r3, #2
 8004a04:	6033      	strmi	r3, [r6, #0]
 8004a06:	6825      	ldr	r5, [r4, #0]
 8004a08:	f015 0506 	ands.w	r5, r5, #6
 8004a0c:	d106      	bne.n	8004a1c <_printf_common+0x48>
 8004a0e:	f104 0a19 	add.w	sl, r4, #25
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	6832      	ldr	r2, [r6, #0]
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	42ab      	cmp	r3, r5
 8004a1a:	dc26      	bgt.n	8004a6a <_printf_common+0x96>
 8004a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a20:	1e13      	subs	r3, r2, #0
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	bf18      	it	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	0692      	lsls	r2, r2, #26
 8004a2a:	d42b      	bmi.n	8004a84 <_printf_common+0xb0>
 8004a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a30:	4649      	mov	r1, r9
 8004a32:	4638      	mov	r0, r7
 8004a34:	47c0      	blx	r8
 8004a36:	3001      	adds	r0, #1
 8004a38:	d01e      	beq.n	8004a78 <_printf_common+0xa4>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	6922      	ldr	r2, [r4, #16]
 8004a3e:	f003 0306 	and.w	r3, r3, #6
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	bf02      	ittt	eq
 8004a46:	68e5      	ldreq	r5, [r4, #12]
 8004a48:	6833      	ldreq	r3, [r6, #0]
 8004a4a:	1aed      	subeq	r5, r5, r3
 8004a4c:	68a3      	ldr	r3, [r4, #8]
 8004a4e:	bf0c      	ite	eq
 8004a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a54:	2500      	movne	r5, #0
 8004a56:	4293      	cmp	r3, r2
 8004a58:	bfc4      	itt	gt
 8004a5a:	1a9b      	subgt	r3, r3, r2
 8004a5c:	18ed      	addgt	r5, r5, r3
 8004a5e:	2600      	movs	r6, #0
 8004a60:	341a      	adds	r4, #26
 8004a62:	42b5      	cmp	r5, r6
 8004a64:	d11a      	bne.n	8004a9c <_printf_common+0xc8>
 8004a66:	2000      	movs	r0, #0
 8004a68:	e008      	b.n	8004a7c <_printf_common+0xa8>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4652      	mov	r2, sl
 8004a6e:	4649      	mov	r1, r9
 8004a70:	4638      	mov	r0, r7
 8004a72:	47c0      	blx	r8
 8004a74:	3001      	adds	r0, #1
 8004a76:	d103      	bne.n	8004a80 <_printf_common+0xac>
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a80:	3501      	adds	r5, #1
 8004a82:	e7c6      	b.n	8004a12 <_printf_common+0x3e>
 8004a84:	18e1      	adds	r1, r4, r3
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	2030      	movs	r0, #48	; 0x30
 8004a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a8e:	4422      	add	r2, r4
 8004a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a98:	3302      	adds	r3, #2
 8004a9a:	e7c7      	b.n	8004a2c <_printf_common+0x58>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	47c0      	blx	r8
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d0e6      	beq.n	8004a78 <_printf_common+0xa4>
 8004aaa:	3601      	adds	r6, #1
 8004aac:	e7d9      	b.n	8004a62 <_printf_common+0x8e>
	...

08004ab0 <_printf_i>:
 8004ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab4:	7e0f      	ldrb	r7, [r1, #24]
 8004ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ab8:	2f78      	cmp	r7, #120	; 0x78
 8004aba:	4691      	mov	r9, r2
 8004abc:	4680      	mov	r8, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	469a      	mov	sl, r3
 8004ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ac6:	d807      	bhi.n	8004ad8 <_printf_i+0x28>
 8004ac8:	2f62      	cmp	r7, #98	; 0x62
 8004aca:	d80a      	bhi.n	8004ae2 <_printf_i+0x32>
 8004acc:	2f00      	cmp	r7, #0
 8004ace:	f000 80d4 	beq.w	8004c7a <_printf_i+0x1ca>
 8004ad2:	2f58      	cmp	r7, #88	; 0x58
 8004ad4:	f000 80c0 	beq.w	8004c58 <_printf_i+0x1a8>
 8004ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ae0:	e03a      	b.n	8004b58 <_printf_i+0xa8>
 8004ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ae6:	2b15      	cmp	r3, #21
 8004ae8:	d8f6      	bhi.n	8004ad8 <_printf_i+0x28>
 8004aea:	a101      	add	r1, pc, #4	; (adr r1, 8004af0 <_printf_i+0x40>)
 8004aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004af0:	08004b49 	.word	0x08004b49
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	08004ad9 	.word	0x08004ad9
 8004afc:	08004ad9 	.word	0x08004ad9
 8004b00:	08004ad9 	.word	0x08004ad9
 8004b04:	08004ad9 	.word	0x08004ad9
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004ad9 	.word	0x08004ad9
 8004b10:	08004ad9 	.word	0x08004ad9
 8004b14:	08004ad9 	.word	0x08004ad9
 8004b18:	08004ad9 	.word	0x08004ad9
 8004b1c:	08004c61 	.word	0x08004c61
 8004b20:	08004b89 	.word	0x08004b89
 8004b24:	08004c1b 	.word	0x08004c1b
 8004b28:	08004ad9 	.word	0x08004ad9
 8004b2c:	08004ad9 	.word	0x08004ad9
 8004b30:	08004c83 	.word	0x08004c83
 8004b34:	08004ad9 	.word	0x08004ad9
 8004b38:	08004b89 	.word	0x08004b89
 8004b3c:	08004ad9 	.word	0x08004ad9
 8004b40:	08004ad9 	.word	0x08004ad9
 8004b44:	08004c23 	.word	0x08004c23
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	1d1a      	adds	r2, r3, #4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	602a      	str	r2, [r5, #0]
 8004b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e09f      	b.n	8004c9c <_printf_i+0x1ec>
 8004b5c:	6820      	ldr	r0, [r4, #0]
 8004b5e:	682b      	ldr	r3, [r5, #0]
 8004b60:	0607      	lsls	r7, r0, #24
 8004b62:	f103 0104 	add.w	r1, r3, #4
 8004b66:	6029      	str	r1, [r5, #0]
 8004b68:	d501      	bpl.n	8004b6e <_printf_i+0xbe>
 8004b6a:	681e      	ldr	r6, [r3, #0]
 8004b6c:	e003      	b.n	8004b76 <_printf_i+0xc6>
 8004b6e:	0646      	lsls	r6, r0, #25
 8004b70:	d5fb      	bpl.n	8004b6a <_printf_i+0xba>
 8004b72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	da03      	bge.n	8004b82 <_printf_i+0xd2>
 8004b7a:	232d      	movs	r3, #45	; 0x2d
 8004b7c:	4276      	negs	r6, r6
 8004b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b82:	485a      	ldr	r0, [pc, #360]	; (8004cec <_printf_i+0x23c>)
 8004b84:	230a      	movs	r3, #10
 8004b86:	e012      	b.n	8004bae <_printf_i+0xfe>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	6820      	ldr	r0, [r4, #0]
 8004b8c:	1d19      	adds	r1, r3, #4
 8004b8e:	6029      	str	r1, [r5, #0]
 8004b90:	0605      	lsls	r5, r0, #24
 8004b92:	d501      	bpl.n	8004b98 <_printf_i+0xe8>
 8004b94:	681e      	ldr	r6, [r3, #0]
 8004b96:	e002      	b.n	8004b9e <_printf_i+0xee>
 8004b98:	0641      	lsls	r1, r0, #25
 8004b9a:	d5fb      	bpl.n	8004b94 <_printf_i+0xe4>
 8004b9c:	881e      	ldrh	r6, [r3, #0]
 8004b9e:	4853      	ldr	r0, [pc, #332]	; (8004cec <_printf_i+0x23c>)
 8004ba0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2308      	moveq	r3, #8
 8004ba6:	230a      	movne	r3, #10
 8004ba8:	2100      	movs	r1, #0
 8004baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bae:	6865      	ldr	r5, [r4, #4]
 8004bb0:	60a5      	str	r5, [r4, #8]
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	bfa2      	ittt	ge
 8004bb6:	6821      	ldrge	r1, [r4, #0]
 8004bb8:	f021 0104 	bicge.w	r1, r1, #4
 8004bbc:	6021      	strge	r1, [r4, #0]
 8004bbe:	b90e      	cbnz	r6, 8004bc4 <_printf_i+0x114>
 8004bc0:	2d00      	cmp	r5, #0
 8004bc2:	d04b      	beq.n	8004c5c <_printf_i+0x1ac>
 8004bc4:	4615      	mov	r5, r2
 8004bc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bca:	fb03 6711 	mls	r7, r3, r1, r6
 8004bce:	5dc7      	ldrb	r7, [r0, r7]
 8004bd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bd4:	4637      	mov	r7, r6
 8004bd6:	42bb      	cmp	r3, r7
 8004bd8:	460e      	mov	r6, r1
 8004bda:	d9f4      	bls.n	8004bc6 <_printf_i+0x116>
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d10b      	bne.n	8004bf8 <_printf_i+0x148>
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	07de      	lsls	r6, r3, #31
 8004be4:	d508      	bpl.n	8004bf8 <_printf_i+0x148>
 8004be6:	6923      	ldr	r3, [r4, #16]
 8004be8:	6861      	ldr	r1, [r4, #4]
 8004bea:	4299      	cmp	r1, r3
 8004bec:	bfde      	ittt	le
 8004bee:	2330      	movle	r3, #48	; 0x30
 8004bf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bf8:	1b52      	subs	r2, r2, r5
 8004bfa:	6122      	str	r2, [r4, #16]
 8004bfc:	f8cd a000 	str.w	sl, [sp]
 8004c00:	464b      	mov	r3, r9
 8004c02:	aa03      	add	r2, sp, #12
 8004c04:	4621      	mov	r1, r4
 8004c06:	4640      	mov	r0, r8
 8004c08:	f7ff fee4 	bl	80049d4 <_printf_common>
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d14a      	bne.n	8004ca6 <_printf_i+0x1f6>
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	b004      	add	sp, #16
 8004c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	f043 0320 	orr.w	r3, r3, #32
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	4833      	ldr	r0, [pc, #204]	; (8004cf0 <_printf_i+0x240>)
 8004c24:	2778      	movs	r7, #120	; 0x78
 8004c26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	6829      	ldr	r1, [r5, #0]
 8004c2e:	061f      	lsls	r7, r3, #24
 8004c30:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c34:	d402      	bmi.n	8004c3c <_printf_i+0x18c>
 8004c36:	065f      	lsls	r7, r3, #25
 8004c38:	bf48      	it	mi
 8004c3a:	b2b6      	uxthmi	r6, r6
 8004c3c:	07df      	lsls	r7, r3, #31
 8004c3e:	bf48      	it	mi
 8004c40:	f043 0320 	orrmi.w	r3, r3, #32
 8004c44:	6029      	str	r1, [r5, #0]
 8004c46:	bf48      	it	mi
 8004c48:	6023      	strmi	r3, [r4, #0]
 8004c4a:	b91e      	cbnz	r6, 8004c54 <_printf_i+0x1a4>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	f023 0320 	bic.w	r3, r3, #32
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	2310      	movs	r3, #16
 8004c56:	e7a7      	b.n	8004ba8 <_printf_i+0xf8>
 8004c58:	4824      	ldr	r0, [pc, #144]	; (8004cec <_printf_i+0x23c>)
 8004c5a:	e7e4      	b.n	8004c26 <_printf_i+0x176>
 8004c5c:	4615      	mov	r5, r2
 8004c5e:	e7bd      	b.n	8004bdc <_printf_i+0x12c>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	6826      	ldr	r6, [r4, #0]
 8004c64:	6961      	ldr	r1, [r4, #20]
 8004c66:	1d18      	adds	r0, r3, #4
 8004c68:	6028      	str	r0, [r5, #0]
 8004c6a:	0635      	lsls	r5, r6, #24
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	d501      	bpl.n	8004c74 <_printf_i+0x1c4>
 8004c70:	6019      	str	r1, [r3, #0]
 8004c72:	e002      	b.n	8004c7a <_printf_i+0x1ca>
 8004c74:	0670      	lsls	r0, r6, #25
 8004c76:	d5fb      	bpl.n	8004c70 <_printf_i+0x1c0>
 8004c78:	8019      	strh	r1, [r3, #0]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6123      	str	r3, [r4, #16]
 8004c7e:	4615      	mov	r5, r2
 8004c80:	e7bc      	b.n	8004bfc <_printf_i+0x14c>
 8004c82:	682b      	ldr	r3, [r5, #0]
 8004c84:	1d1a      	adds	r2, r3, #4
 8004c86:	602a      	str	r2, [r5, #0]
 8004c88:	681d      	ldr	r5, [r3, #0]
 8004c8a:	6862      	ldr	r2, [r4, #4]
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f7fb faa6 	bl	80001e0 <memchr>
 8004c94:	b108      	cbz	r0, 8004c9a <_printf_i+0x1ea>
 8004c96:	1b40      	subs	r0, r0, r5
 8004c98:	6060      	str	r0, [r4, #4]
 8004c9a:	6863      	ldr	r3, [r4, #4]
 8004c9c:	6123      	str	r3, [r4, #16]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca4:	e7aa      	b.n	8004bfc <_printf_i+0x14c>
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	462a      	mov	r2, r5
 8004caa:	4649      	mov	r1, r9
 8004cac:	4640      	mov	r0, r8
 8004cae:	47d0      	blx	sl
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	d0ad      	beq.n	8004c10 <_printf_i+0x160>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	079b      	lsls	r3, r3, #30
 8004cb8:	d413      	bmi.n	8004ce2 <_printf_i+0x232>
 8004cba:	68e0      	ldr	r0, [r4, #12]
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	4298      	cmp	r0, r3
 8004cc0:	bfb8      	it	lt
 8004cc2:	4618      	movlt	r0, r3
 8004cc4:	e7a6      	b.n	8004c14 <_printf_i+0x164>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4632      	mov	r2, r6
 8004cca:	4649      	mov	r1, r9
 8004ccc:	4640      	mov	r0, r8
 8004cce:	47d0      	blx	sl
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d09d      	beq.n	8004c10 <_printf_i+0x160>
 8004cd4:	3501      	adds	r5, #1
 8004cd6:	68e3      	ldr	r3, [r4, #12]
 8004cd8:	9903      	ldr	r1, [sp, #12]
 8004cda:	1a5b      	subs	r3, r3, r1
 8004cdc:	42ab      	cmp	r3, r5
 8004cde:	dcf2      	bgt.n	8004cc6 <_printf_i+0x216>
 8004ce0:	e7eb      	b.n	8004cba <_printf_i+0x20a>
 8004ce2:	2500      	movs	r5, #0
 8004ce4:	f104 0619 	add.w	r6, r4, #25
 8004ce8:	e7f5      	b.n	8004cd6 <_printf_i+0x226>
 8004cea:	bf00      	nop
 8004cec:	08004f41 	.word	0x08004f41
 8004cf0:	08004f52 	.word	0x08004f52

08004cf4 <memmove>:
 8004cf4:	4288      	cmp	r0, r1
 8004cf6:	b510      	push	{r4, lr}
 8004cf8:	eb01 0402 	add.w	r4, r1, r2
 8004cfc:	d902      	bls.n	8004d04 <memmove+0x10>
 8004cfe:	4284      	cmp	r4, r0
 8004d00:	4623      	mov	r3, r4
 8004d02:	d807      	bhi.n	8004d14 <memmove+0x20>
 8004d04:	1e43      	subs	r3, r0, #1
 8004d06:	42a1      	cmp	r1, r4
 8004d08:	d008      	beq.n	8004d1c <memmove+0x28>
 8004d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d12:	e7f8      	b.n	8004d06 <memmove+0x12>
 8004d14:	4402      	add	r2, r0
 8004d16:	4601      	mov	r1, r0
 8004d18:	428a      	cmp	r2, r1
 8004d1a:	d100      	bne.n	8004d1e <memmove+0x2a>
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d26:	e7f7      	b.n	8004d18 <memmove+0x24>

08004d28 <_sbrk_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d06      	ldr	r5, [pc, #24]	; (8004d44 <_sbrk_r+0x1c>)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4608      	mov	r0, r1
 8004d32:	602b      	str	r3, [r5, #0]
 8004d34:	f7fc fbd4 	bl	80014e0 <_sbrk>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_sbrk_r+0x1a>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_sbrk_r+0x1a>
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	20000344 	.word	0x20000344

08004d48 <memcpy>:
 8004d48:	440a      	add	r2, r1
 8004d4a:	4291      	cmp	r1, r2
 8004d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d50:	d100      	bne.n	8004d54 <memcpy+0xc>
 8004d52:	4770      	bx	lr
 8004d54:	b510      	push	{r4, lr}
 8004d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d5e:	4291      	cmp	r1, r2
 8004d60:	d1f9      	bne.n	8004d56 <memcpy+0xe>
 8004d62:	bd10      	pop	{r4, pc}

08004d64 <_realloc_r>:
 8004d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d68:	4680      	mov	r8, r0
 8004d6a:	4614      	mov	r4, r2
 8004d6c:	460e      	mov	r6, r1
 8004d6e:	b921      	cbnz	r1, 8004d7a <_realloc_r+0x16>
 8004d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d74:	4611      	mov	r1, r2
 8004d76:	f7ff bc49 	b.w	800460c <_malloc_r>
 8004d7a:	b92a      	cbnz	r2, 8004d88 <_realloc_r+0x24>
 8004d7c:	f7ff fbda 	bl	8004534 <_free_r>
 8004d80:	4625      	mov	r5, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d88:	f000 f81b 	bl	8004dc2 <_malloc_usable_size_r>
 8004d8c:	4284      	cmp	r4, r0
 8004d8e:	4607      	mov	r7, r0
 8004d90:	d802      	bhi.n	8004d98 <_realloc_r+0x34>
 8004d92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d96:	d812      	bhi.n	8004dbe <_realloc_r+0x5a>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	f7ff fc36 	bl	800460c <_malloc_r>
 8004da0:	4605      	mov	r5, r0
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d0ed      	beq.n	8004d82 <_realloc_r+0x1e>
 8004da6:	42bc      	cmp	r4, r7
 8004da8:	4622      	mov	r2, r4
 8004daa:	4631      	mov	r1, r6
 8004dac:	bf28      	it	cs
 8004dae:	463a      	movcs	r2, r7
 8004db0:	f7ff ffca 	bl	8004d48 <memcpy>
 8004db4:	4631      	mov	r1, r6
 8004db6:	4640      	mov	r0, r8
 8004db8:	f7ff fbbc 	bl	8004534 <_free_r>
 8004dbc:	e7e1      	b.n	8004d82 <_realloc_r+0x1e>
 8004dbe:	4635      	mov	r5, r6
 8004dc0:	e7df      	b.n	8004d82 <_realloc_r+0x1e>

08004dc2 <_malloc_usable_size_r>:
 8004dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc6:	1f18      	subs	r0, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfbc      	itt	lt
 8004dcc:	580b      	ldrlt	r3, [r1, r0]
 8004dce:	18c0      	addlt	r0, r0, r3
 8004dd0:	4770      	bx	lr
	...

08004dd4 <_init>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	bf00      	nop
 8004dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dda:	bc08      	pop	{r3}
 8004ddc:	469e      	mov	lr, r3
 8004dde:	4770      	bx	lr

08004de0 <_fini>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	bf00      	nop
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr
